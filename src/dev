#!/usr/bin/env bash

# This script provides shortcuts for common ddev, shopware and other tools commands.
#
# Author: Andre Witte
#
# Description: dDEV shortening tools
# Usage: dev [OPTIONS] [PARAMETERS]
# Version: 1.1.5
# https://github.com/akaw/dev-cli-tools/
#
# shellcheck disable=SC2034,SC2168,SC2317

# Default Configuration
VERSION="1.1.5"
DOCKER_ENVIRONMENT="${DOCKER_ENVIRONMENT:-orbstack}"
BACKUP_DIR="${BACKUP_DIR:-.project/backups}"
DB_EXPORT_FILE="${DB_EXPORT_FILE:-.project/db.sql.gz}"
DEFAULT_PHP_VERSION="${DEFAULT_PHP_VERSION:-8.2}"
DEFAULT_NODE_VERSION="${DEFAULT_NODE_VERSION:-20}"
DEFAULT_MYSQL_VERSION="${DEFAULT_MYSQL_VERSION:-8.0}"
LOG_FILE="${LOG_FILE:-dev.log}"

OS=$(uname -s)

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# Define script directory
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

# Log level
log_level=1

# Logging configuration
LOG_FILE="${SCRIPT_DIR}/${LOG_FILE}"
LOG_LEVEL="${LOG_LEVEL:-INFO}" # Use LOG_LEVEL from environment or set to INFO

# Extended color definitions
declare -A COLORS=(
    [RESET]='\033[0m'
    [BOLD]='\033[1m'
    [DIM]='\033[2m'
    [ITALIC]='\033[3m'
    [DEBUG]='\033[0;36m'     # Cyan
    [INFO]='\033[0;32m'      # Green
    [WARN]='\033[0;33m'      # Yellow
    [ERROR]='\033[0;31m'     # Red
    [TIMESTAMP]='\033[0;90m' # Light gray
)

# Enhanced logging function
log() {
    local level=$1
    local message=$2
    local timestamp
    timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    # Check if logging is enabled for this level
    [[ $level == "DEBUG" && $LOG_LEVEL != "DEBUG" ]] && return

    # Formatted output
    local output="${COLORS[TIMESTAMP]}${timestamp}${COLORS[RESET]} "
    output+="${COLORS[BOLD]}${COLORS[$level]}${level}${COLORS[RESET]} "
    output+="${message}"

    # Console output with formatting
    echo -e "$output"

    # File output without formatting
    echo "[${timestamp}] ${level}: ${message}" >>"${LOG_FILE}"
}

# Specific logging functions
debug() { log "DEBUG" "$1"; }
info() { log "INFO" "$1"; }
warn() { log "WARN" "$1"; }
error() { log "ERROR" "$1" >&2; }

# Replace old die() function
die() {
    error "$1"
    exit "${2:-1}"
}

# Display usage information
usage() {
    cat <<EOF
$(basename "${BASH_SOURCE[0]}") - Development Command Line Tools v${VERSION}

USAGE:
    $(basename "${BASH_SOURCE[0]}") [OPTION] COMMAND [ARGS]

OPTIONS:
    -h,  --help            Show this help
    -v,  --version         Show version
         --no-color        Disable colored output

PROJECT:
    u,   up               Start project
    d,   down            Stop project
    r,   restart         Restart project
    st,  status          Show project status
    o,   open            Open in browser
    init                 Initialize project

DATABASE:
    e,   export [file]   Export database (.project/db.sql.gz)
    i,   import [file]   Import database
    seq, sequelace       Start Sequel Ace
    da:mi                Run database migrations

DEVELOPMENT:
    x,   xdebug         Enable/disable xdebug (on|off)
    t,   test           Run tests [options]
    l,   logs           Show logs
    m,   mail           Start mail server

COMPOSER:
    c,   composer       Run composer command
    cup, update         Update dependencies
    cin, install        Install dependencies
    cre, require        Add package [pkg]
    crm, remove         Remove package [pkg]
    cda                 Update autoloader

SHOPWARE:
    b,   build [comp]   Build components (storefront|admin|js)
    w,   watch [comp]   Watch components
    cc                  Clear cache
    pl:re               Refresh plugins
    pl:li               List plugins
    pl:ac [plugin]      Activate plugin
    pl:de [plugin]      Deactivate plugin

PROJECT:
    n,   new [type]     Create new project (symfony|shopware)
    bk,  backup         Create backup
    rs,  restore        Restore backup
    upgrade             Update script

Examples:
    dev up                 Start project
    dev composer install   Install dependencies
    dev new shopware       Create new Shopware project
EOF
    exit 0
}

# Simple versioning and message output
version() {
    echo -e "dev-cli-tools ${VERSION}\nhttps://github.com/akaw/dev-cli-tools/"
    exit 0
}

# Cleanup function to handle script termination
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # Stop all running processes
    jobs -p | xargs -r kill
    # Remove temporary files if they exist
    if [ -n "${TEMP_DIR-}" ] && [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Simplified color output
setup_colors() {
    NOFORMAT='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
}

# Simple message output
msg() {
    echo "$1"
}

# Default function to start the development environment
# This function is called when no arguments are provided
# u = up, seq = sequelace, l = logs, o = open in browser
default() {
    start_docker_environment
    sleep 3
    dev u
    dev info
    dev seq
    dev o
    code .
}

# Function to upgrade the script
upgrade() {
    local script_path="${BASH_SOURCE[0]}"
    echo "Loading latest version..."

    # Create backup
    cp "$script_path" "${script_path}.backup"

    if curl -o "$script_path" "https://raw.githubusercontent.com/akaw/dev-cli-tools/main/src/dev"; then
        chmod +x "$script_path"
        echo "Update successful!"
        # Get the new version directly from the script
        VERSION=$(grep -m 1 "^VERSION=" "$script_path" | cut -d'"' -f2)
        echo "New version: ${VERSION}"
    else
        echo "Update failed. Restoring backup..."
        mv "${script_path}.backup" "$script_path"
        exit 1
    fi

    rm -f "${script_path}.backup"
    exit 0
}

# Function to check if a file exists
check_file_exists() {
    local file_path="$1"
    if [[ ! -f "$file_path" ]]; then
        die "File not found: $file_path"
    fi
}

# Check service status based on environment
check_service_status() {
    local env=$1
    debug "Checking service status for environment: $env"

    case "$env" in
    "orbstack")
        if [[ "$OS" == "Darwin" ]]; then
            debug "Checking OrbStack service via launchctl"
            check_service_running "launchctl" "com.orbstack.OrbStack"
        else
            debug "Checking OrbStack service via pgrep"
            check_service_running "pgrep" "OrbStack"
        fi
        ;;
    "docker")
        if [[ "$OS" == "Darwin" ]]; then
            debug "Checking Docker Desktop service via launchctl"
            check_service_running "launchctl" "com.docker.docker"
        else
            debug "Checking Docker service via systemctl"
            check_service_running "systemctl" "docker"
        fi
        ;;
    *)
        debug "Unknown environment: $env"
        return 1
        ;;
    esac
}

# Check if a service is running
check_service_running() {
    local service_type=$1
    local service_name=$2

    case "$service_type" in
    "launchctl")
        launchctl list | grep -q "$service_name"
        return $?
        ;;
    "pgrep")
        pgrep -x "$service_name" >/dev/null
        return $?
        ;;
    "systemctl")
        systemctl is-active --quiet "$service_name"
        return $?
        ;;
    *)
        return 1
        ;;
    esac
}

# Start a service based on OS and environment
start_service() {
    local env=$1
    local service=$2

    debug "Attempting to start $service ($env, $OS)"

    case "$OS" in
    "Darwin")
        debug "Starting $service with 'open' on macOS"
        open -ga "$service"
        ;;
    "Linux")
        debug "Starting $service on Linux"
        if [[ "$env" == "orbstack" ]]; then
            debug "Using orbstack start command"
            orbstack start
        else
            debug "Using systemctl for Docker"
            sudo systemctl start "$service"
        fi
        ;;
    *)
        die "Unsupported operating system: $OS"
        ;;
    esac

    local max_attempts=10
    local attempt=1

    debug "Waiting up to ${max_attempts}s for $service to start"

    while [ $attempt -le $max_attempts ]; do
        if check_service_status "$env"; then
            info "$service is ready (after ${attempt}s)"
            return 0
        fi
        debug "Waiting for $service (attempt $attempt of $max_attempts)..."
        sleep 1
        attempt=$((attempt + 1))
    done

    die "$service could not be started (timeout after ${max_attempts}s)"
}

# Function to start Docker environment
start_docker_environment() {
    if [[ -z "${DOCKER_ENVIRONMENT:-}" ]]; then
        die "DOCKER_ENVIRONMENT is not set. Please set it to 'orbstack' or 'docker'"
    fi

    debug "Checking Docker environment: $DOCKER_ENVIRONMENT"

    # Validate Docker environment early
    if [[ "$DOCKER_ENVIRONMENT" != "orbstack" && "$DOCKER_ENVIRONMENT" != "docker" ]]; then
        die "Invalid Docker environment: $DOCKER_ENVIRONMENT. Supported values are: orbstack, docker"
    fi

    case "${DOCKER_ENVIRONMENT}" in
    "orbstack")
        if check_service_status "orbstack"; then
            info "OrbStack is already running"
        else
            start_service "orbstack" "/Applications/OrbStack.app"
        fi
        ;;
    "docker")
        if check_service_status "docker"; then
            info "Docker is already running"
        else
            if [[ "$OS" == "Darwin" ]]; then
                start_service "docker" "Docker"
            else
                start_service "docker" "docker"
            fi
        fi
        ;;
    esac
}

# Create project structure and initialize configuration
create_project_structure() {
    local project_type=$1
    local project_name=${2:-$(basename "$PWD")}

    debug "Creating project structure for: $project_type ($project_name)"

    # Create basic project structure
    mkdir -p .project/{backups,config,scripts}

    # Create common configuration
    cat >.project/config/common.env <<EOL
APP_ENV=dev
APP_DEBUG=1
COMPOSER_MEMORY_LIMIT=-1
EOL

    # Project specific configurations
    case "$project_type" in
    "symfony")
        debug "Setting up Symfony project configuration"
        cat >.project/config/ddev.yaml <<EOL
name: $project_name
type: php
docroot: public
php_version: "${DEFAULT_PHP_VERSION}"
nodejs_version: "${DEFAULT_NODE_VERSION}"
mysql_version: "${DEFAULT_MYSQL_VERSION}"
webserver_type: nginx-fpm
web_environment:
- DATABASE_URL=mysql://db:db@db:3306/db
- MAILER_DSN=smtp://localhost:1025
- APP_ENV=dev
- APP_DEBUG=1

hooks:
  post-start:
    - exec: composer install
    - exec: bin/console cache:clear
EOL
        ;;
    "shopware")
        debug "Setting up Shopware project configuration"
        cat >.project/config/ddev.yaml <<EOL
name: $project_name
type: shopware6
docroot: shopware/public
php_version: "${DEFAULT_PHP_VERSION}"
nodejs_version: "${DEFAULT_NODE_VERSION}"
mysql_version: "${DEFAULT_MYSQL_VERSION}"
webserver_type: apache-fpm
web_environment:
- DATABASE_URL=mysql://db:db@db:3306/db
- MAILER_DSN=smtp://localhost:1025?encryption=&auth_mode=
- APP_URL=\${DDEV_PRIMARY_URL}
- APP_ENV=dev
- APP_DEBUG=1
- LOCK_DSN=flock

hooks:
  post-start:
    - exec: composer install
    - exec: bin/console cache:clear
    - exec: bin/build-js.sh
EOL

        # Create Shopware specific scripts
        cat >.project/scripts/build-all.sh <<EOL
#!/bin/bash
bin/build-js.sh
bin/build-storefront.sh
bin/build-administration.sh
EOL
        chmod +x .project/scripts/build-all.sh
        ;;
    *)
        die "Unsupported project type: $project_type"
        ;;
    esac

    # Create gitignore if it doesn't exist
    if [[ ! -f ".gitignore" ]]; then
        cat >.gitignore <<EOL
/.project/backups/
/.env.local
/vendor/
/var/
/node_modules/
*.log
.DS_Store
EOL
    fi

    debug "Project structure created successfully"
    return 0
}

# Setup build tools for project
setup_build_tools() {
    local project_type=$1

    debug "Setting up build tools for: $project_type"

    case "$project_type" in
    "symfony")
        debug "Installing Symfony build dependencies"
        ddev composer require --dev symfony/webpack-encore
        ddev npm install
        ;;

    "shopware")
        debug "Installing Shopware build dependencies"
        ddev npm clean-install
        ddev npm run build
        ;;
    esac

    # Create common build scripts
    mkdir -p .project/scripts

    # Create build script
    cat >.project/scripts/build.sh <<EOL
#!/bin/bash
set -e

echo "Building project assets..."
if [ -f "bin/build-js.sh" ]; then
    bin/build-js.sh
fi

if [ -f "bin/build-storefront.sh" ]; then
    bin/build-storefront.sh
fi

if [ -f "bin/build-administration.sh" ]; then
    bin/build-administration.sh
fi

if [ -f "node_modules/.bin/encore" ]; then
    node_modules/.bin/encore production
fi

echo "Build completed successfully"
EOL
    chmod +x .project/scripts/build.sh

    debug "Build tools setup completed"
    return 0
}

# Parse command-line parameters
parse_params() {
    # Initialize all command flags
    init_command_flags

    # Get the command (first argument)
    local command="${1-}"
    [[ -z "$command" ]] && return 0
    shift || true

    case "$command" in
    n | new)
        new=1
        newparam="${1-}"
        if [[ -z "$newparam" ]]; then
            read -r -p "Project type (symfony|shopware): " newparam
        else
            shift
        fi

        # Normalize project type
        case "$newparam" in
        symfony | sy | sym)
            newparam="symfony"
            ;;
        shopware | sw | sh | sho | shop)
            newparam="shopware"
            ;;
        *)
            die "Unknown project type: $newparam. Use symfony or shopware"
            ;;
        esac
        ;;

    b | build)
        build=1
        buildparam="${1-}"
        [[ -n "$buildparam" ]] && shift
        ;;

    w | watch)
        watch=1
        watchparam="${1-}"
        [[ -n "$watchparam" ]] && shift
        ;;

    e | export)
        exportdb=1
        exportdbparam="${1-.project/db.sql.gz}"
        [[ -n "$exportdbparam" ]] && shift
        ;;

    i | import)
        importdb=1
        importdbparam="${1-.project/db.sql.gz}"
        [[ -n "$importdbparam" ]] && shift
        ;;

    t | test)
        test=1
        testparam="${1-}"
        [[ -n "$testparam" ]] && shift
        ;;

    u | up)
        start=1
        ;;

    d | down)
        down=1
        ;;

    r | restart)
        restart=1
        ;;

    st | status)
        status=1
        ;;

    bk | backup)
        backup=1
        ;;

    rs | restore)
        restore=1
        restoreparam="${1-}"
        [[ -n "$restoreparam" ]] && shift
        ;;

    init)
        init=1
        ;;

    *)
        die "Unknown command: $command"
        ;;
    esac

    return 0
}

# Initialize command flags
init_command_flags() {
    # Project commands
    new=0
    newparam=""
    start=0
    down=0
    restart=0
    status=0
    init=0

    # Database commands
    exportdb=0
    exportdbparam=""
    importdb=0
    importdbparam=""
    sequelace=0

    # Development commands
    xdebug=0
    xdebugparam=""
    test=0
    testparam=""
    logs=0
    mail=0

    # Console commands
    console=0
    consoleparam=""

    # Build commands
    build=0
    buildparam=""
    watch=0
    watchparam=""

    # Composer commands
    composer=0
    composerparam=""
    require=0
    requireparam=""
    remove=0
    removeparam=""

    # Package commands
    packages=0
    packagesparam=""
    prefersource=0
    prefersourceparam=""

    # Misc commands
    backup=0
    restore=0
    restoreparam=""
    launch=0
    launchparam=""
    version=0
    lint=0
}

# Main execution
main() {
    # Setup colors first
    setup_colors

    # Enable debug logging if set
    if [[ "${LOG_LEVEL:-}" == "DEBUG" ]]; then
        debug "Debug mode enabled"
        debug "Operating system: $OS"
        debug "Docker environment: ${DOCKER_ENVIRONMENT:-not set}"
    fi

    # Handle global options
    while [[ "${1-}" =~ ^- ]]; do
        case "${1-}" in
        --no-color)
            NO_COLOR=1
            shift
            ;;
        -v | --version)
            version
            exit 0
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            break
            ;;
        esac
    done

    # No arguments provided
    if [ $# -eq 0 ]; then
        default
        exit 0
    fi

    # Parse and execute commands
    parse_params "$@"
    execute_commands

    exit 0
}

# Remove unreachable version check in execute_commands
execute_commands() {
    # Only check for ddev if we're executing commands that need it
    if [[ $console == 1 ]] || [[ $composer == 1 ]] || [[ $build == 1 ]] ||
        [[ $watch == 1 ]] || [[ $exportdb == 1 ]] || [[ $importdb == 1 ]] ||
        [[ $init == 1 ]] || [[ $test == 1 ]] || [[ $backup == 1 ]] ||
        [[ $restore == 1 ]] || [[ $packages == 1 ]] || [[ $new == 1 ]]; then
        if ! command -v ddev &>/dev/null; then
            die "ddev is not installed. Please install ddev first."
        fi
    fi

    # Execute commands
    if [[ $console == 1 ]]; then
        echo "Executing console command: $consoleparam"
        ddev exec console "$consoleparam"
    fi

    # Run composer commands
    if [[ $composer == 1 ]]; then
        echo "Updating project dependencies..."
        ddev composer "$composerparam"
        echo "Project dependencies updated"
    fi

    # Build shopware components
    if [[ $build == 1 ]]; then
        echo "Building project components: $buildparam"
        if [[ $buildparam == "storefront" ]]; then
            ddev exec bin/build-storefront.sh
        fi
        if [[ $buildparam == "administration" ]]; then
            ddev exec bin/build-administration.sh
        fi
        if [[ $buildparam == "js" ]]; then
            ddev exec bin/build-js.sh
        fi
    fi

    if [[ $watch == 1 ]]; then
        if [[ -z "${watchparam}" || $watchparam == "storefront" || $watchparam == "store" || $watchparam == "s" ]]; then
            echo "Watching storefront..."
            ddev exec bin/watch-storefront.sh
        fi
        if [[ $watchparam == "administration" || $watchparam == "admin" || $watchparam == "a" ]]; then
            echo "Watching administration..."
            ddev exec bin/watch-administration.sh
        fi
    fi

    # Export the database
    if [[ $exportdb == 1 ]]; then
        echo "Exporting database..."
        ddev export-db -f "$exportdbparam"
    fi

    # Import the database
    if [[ $importdb == 1 ]]; then
        echo "Importing database from $importdbparam..."
        check_file_exists "$importdbparam"
        ddev import-db -f "$importdbparam"
    fi

    # Initialize the project
    if [[ $init == 1 ]]; then
        read -r -p "Initialize DEV Environment? This will overwrite db and .env.local (y/n)?" choice
        case "$choice" in
        y | Y)
            echo "Initializing project..."
            check_file_exists ".project/init.sql.gz"
            check_file_exists ".project/env.ddev"
            ddev exec cp .env.ddev .env.local
            ddev start
            ddev import-db -f .project/init.sql.gz
            ddev describe
            ;;
        *) usage ;;
        esac
    fi

    # Run tests
    if [[ $test == 1 ]]; then
        echo "Running tests: $testparam"
        [[ -z "${testparam-}" ]] && testparam=""
        ddev exec php bin/phpunit "$testparam"
    fi

    # Create a backup
    if [[ $backup == 1 ]]; then
        echo "Creating backup..."
        ddev exec tar -czf backup.tar.gz .
        echo "Backup created: backup.tar.gz"
    fi

    # Restore the project from a backup
    if [[ $restore == 1 ]]; then
        echo "Restoring project from backup: $restoreparam"
        [[ -z "${restoreparam-}" ]] && restoreparam="backup.tar.gz"
        ddev exec tar -xzf "$restoreparam"
        echo "Project restored from: $restoreparam"
    fi

    # Process packages
    process_packages() {
        local base_dir="./"
        local vendor_dir="$base_dir/vendor"
        local plugins_dir="$base_dir/custom/plugins"

        find "$vendor_dir/store.shopware.com" -name "composer.json" -type f -maxdepth 2 | while read -r store_composer_file; do
            local path
            local link_name
            local link_path

            path=$(dirname "$store_composer_file" | sed "s|$vendor_dir/||")
            link_name=$(create_package_name "$path")
            link_path="$plugins_dir/$link_name"

            if [ "$packagesparam" = true ]; then
                [ -L "$link_path" ] && unlink "$link_path"
                [ -d "$link_path" ] && rmdir "$link_path"
                ln -s "../../vendor/$path" "$link_path"
            else
                echo "$link_name"
            fi
        done
    }

    if [[ $packages == 1 ]]; then
        process_packages
    fi

    create_package_name() {
        if [[ $# -ne 1 ]]; then
            die "Usage: create_package_name <path>"
        fi

        local path="$1"
        local vendor
        local name

        vendor=$(echo "$path" | cut -d'/' -f1)
        name=$(echo "$path" | cut -d'/' -f2)
        vendor="${vendor^}"
        name=$(echo "$name" | sed -e 's/-/ /g' -e 's/\b\(.\)/\u\1/g' -e 's/ //g')
        echo "$vendor$name"
    }

    # Create a new project
    if [[ $new == 1 ]]; then
        debug "Starting new project creation: $newparam"

        # Validate project directory
        if [[ -n "$(ls -A .)" ]]; then
            die "Directory is not empty. Please create project in an empty directory."
        fi

        case "$newparam" in
        "symfony")
            info "Setting up Symfony project..."

            # Configure DDEV
            debug "Configuring DDEV for Symfony"
            if ! ddev config --project-type=php \
                --docroot=public \
                --php-version="$DEFAULT_PHP_VERSION" \
                --nodejs-version="$DEFAULT_NODE_VERSION" \
                --database="mysql:$DEFAULT_MYSQL_VERSION" \
                --webserver-type=nginx-fpm; then
                die "DDEV configuration failed"
            fi

            # Start environment and create Symfony project
            info "Starting DDEV environment..."
            if ! ddev start; then
                die "Failed to start DDEV environment"
            fi

            info "Creating Symfony project..."
            if ! ddev composer create "symfony/skeleton:6.4.*" .; then
                die "Failed to create Symfony project"
            fi

            info "Installing additional dependencies..."
            if ! ddev composer require symfony/webapp-pack; then
                die "Failed to install webapp dependencies"
            fi

            # Now create project structure after Symfony installation
            debug "Creating project structure"
            mkdir -p .project/{backups,config}
            ;;

        "shopware")
            info "Setting up Shopware project..."

            # Configure DDEV
            debug "Configuring DDEV for Shopware"
            if ! ddev config --project-type=shopware6 \
                --docroot=shopware/public \
                --php-version="$DEFAULT_PHP_VERSION" \
                --nodejs-version="$DEFAULT_NODE_VERSION" \
                --database="mysql:$DEFAULT_MYSQL_VERSION" \
                --webserver-type=apache-fpm; then
                die "DDEV configuration failed"
            fi

            # Start environment
            info "Starting DDEV environment..."
            if ! ddev start; then
                die "Failed to start DDEV environment"
            fi

            # Create Shopware project
            info "Creating Shopware project..."
            if ! ddev exec "cd /var/www/html && rm -rf shopware/ && composer create-project shopware/production shopware -n"; then
                die "Failed to create Shopware project"
            fi

            info "Installing Shopware..."
            if ! ddev exec bin/console system:install --basic-setup --shop-locale=en-GB; then
                die "Failed to install Shopware"
            fi

            # Now create project structure after Shopware installation
            debug "Creating project structure"
            mkdir -p .project/{backups,config}
            ;;

        *)
            die "Unknown project type: $newparam"
            ;;
        esac

        info "Project setup completed successfully"
        info "You can now start developing with 'dev up'"

        # Open project in browser if available
        if command -v open >/dev/null 2>&1; then
            debug "Opening project in browser"
            ddev launch >/dev/null 2>&1 || true
        fi

        return 0
    fi

    # Remove unused variables
    unset RED GREEN sequelace logs down xdebug ssh start deletecache restart status \
        update install require requireparam prune upgrade poweroff version lint \
        launch launchparam remove removeparam mail NO_COLOR args

    exit 0
}

# Start script
main "$@"
