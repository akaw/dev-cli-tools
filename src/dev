#!/usr/bin/env bash

# This script provides shortcuts for common ddev, shopware and other tools commands.
#
# Author: Andre Witte
#
# Description: dDEV shortening tools
# Usage: dev [OPTIONS] [PARAMETERS]
# Version: 1.2.0
# https://github.com/akaw/dev-cli-tools/
#
# shellcheck disable=SC2034,SC2168,SC2317

# Default Configuration
VERSION="1.2.0"
DOCKER_ENVIRONMENT="${DOCKER_ENVIRONMENT:-orbstack}"
BACKUP_DIR="${BACKUP_DIR:-.project/backups}"
DB_EXPORT_FILE="${DB_EXPORT_FILE:-.project/db.sql.gz}"
DEFAULT_PHP_VERSION="${DEFAULT_PHP_VERSION:-8.2}"
DEFAULT_NODE_VERSION="${DEFAULT_NODE_VERSION:-20}"
DEFAULT_MYSQL_VERSION="${DEFAULT_MYSQL_VERSION:-8.0}"
LOG_FILE="${LOG_FILE:-dev.log}"

OS=$(uname -s)

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# Define script directory
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

# Log level
log_level=1

# Logging configuration
LOG_FILE="${SCRIPT_DIR}/${LOG_FILE}"
LOG_LEVEL="${LOG_LEVEL:-INFO}" # Use LOG_LEVEL from environment or set to INFO

# Extended color definitions
declare -A COLORS=(
    [RESET]='\033[0m'
    [BOLD]='\033[1m'
    [DIM]='\033[2m'
    [ITALIC]='\033[3m'
    [DEBUG]='\033[0;36m'     # Cyan
    [INFO]='\033[0;32m'      # Green
    [WARN]='\033[0;33m'      # Yellow
    [ERROR]='\033[0;31m'     # Red
    [TIMESTAMP]='\033[0;90m' # Light gray
)

# Enhanced logging function
log() {
    local level=$1
    local message=$2
    local timestamp
    timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    # Check if logging is enabled for this level
    [[ $level == "DEBUG" && $LOG_LEVEL != "DEBUG" ]] && return

    # Formatted output
    local output="${COLORS[TIMESTAMP]}${timestamp}${COLORS[RESET]} "
    output+="${COLORS[BOLD]}${COLORS[$level]}${level}${COLORS[RESET]} "
    output+="${message}"

    # Console output with formatting
    echo -e "$output"

    # File output without formatting
    echo "[${timestamp}] ${level}: ${message}" >>"${LOG_FILE}"
}

# Specific logging functions
debug() { log "DEBUG" "$1"; }
info() { log "INFO" "$1"; }
warn() { log "WARN" "$1"; }
error() { log "ERROR" "$1" >&2; }

# Replace old die() function
die() {
    error "$1"
    exit "${2:-1}"
}

# Display usage information
usage() {
    cat <<EOF
$(basename "${BASH_SOURCE[0]}") - Development Command Line Tools v${VERSION}

USAGE:
    $(basename "${BASH_SOURCE[0]}") [OPTION] COMMAND [ARGS]

OPTIONS:
    -h,  --help          Show this help
    -v,  --version       Show version
         --no-color      Disable colored output
         --no-deprecations  Suppress deprecation warnings
    -vv, --verbose       Verbose output

PROJECT:
    u,   up              Start project
    d,   down            Stop project
    r,   restart         Restart project
    st,  status          Show project status
    o,   open            Open in browser
    s,   ssh             Connect via SSH
    init                 Initialize project

DATABASE:
    e,   export [file]   Export database (.project/db.sql.gz)
    i,   import [file]   Import database
    seq, sequelace       Start Sequel Ace
    da:mi                Run database migrations
    da:mi:all            Run all database migrations

DEVELOPMENT:
    x,   xdebug          Enable/disable xdebug (on|off)
    t,   test            Run tests [options]
    l,   logs            Show logs
    m,   mail            Start mail server
    dr,  debug:router    Show routing information

COMPOSER:
    c,   composer        Run composer command
    cup, update          Update dependencies
    cin, install         Install dependencies
    cre, require         Add package [pkg]
    crm, remove          Remove package [pkg]
    cda                  Update autoloader
    src, prefer-source   Reinstall package with source

SHOPWARE:
    b | build [comp]          Build components (js|admin|store)
    ba | build:administration Build administration
    bs | build:storefront     Build storefront
    bj | build:js             Build JavaScript
    w | watch [comp]          Watch components
    cc | cache:clear          Clear cache
    cd | cache:delete         Delete cache files
    mc | messenger:consume    Run messenger consumer
    pl | plugin:list          List plugins
    plre | plugin:refresh     Refresh plugins
    plac | plugin:activate    Activate plugin
    plde | plugin:deactivate  Deactivate plugin
    plin | plugin:install     Install plugin
    plun | plugin:uninstall   Uninstall plugin
    pu | plup | pl:up | plugin:update      Update plugin

Examples:
    dev        Start development environment 
    dev u      Start project
    dev ci     Composer Install
    dev new    Create new project
    dev ba     bin/build-administration
    dev x on   Enable xdebug
EOF
    exit 0
}

# Simple versioning and message output
version() {
    echo -e "dev-cli-tools ${VERSION}\nhttps://github.com/akaw/dev-cli-tools/"
    exit 0
}

# Cleanup function to handle script termination
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # Stop all running processes
    jobs -p | xargs -r kill
    # Remove temporary files if they exist
    if [ -n "${TEMP_DIR-}" ] && [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Simplified color output
setup_colors() {
    NOFORMAT='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
}

# Simple message output
msg() {
    echo "$1"
}

# Default function to start the development environment
# This function is called when no arguments are provided
# u = up, seq = sequelace, l = logs, o = open in browser
default() {
    start_docker_environment
    sleep 3
    dev u
    dev info
    dev seq
    dev o
    code .
}

# Function to upgrade the script
upgrade() {
    local script_path="${BASH_SOURCE[0]}"
    echo "Loading latest version..."

    # Create backup
    cp "$script_path" "${script_path}.backup"

    if curl -o "$script_path" "https://raw.githubusercontent.com/akaw/dev-cli-tools/main/src/dev"; then
        chmod +x "$script_path"
        echo "Update successful!"
        # Get the new version directly from the script
        VERSION=$(grep -m 1 "^VERSION=" "$script_path" | cut -d'"' -f2)
        echo "New version: ${VERSION}"
    else
        echo "Update failed. Restoring backup..."
        mv "${script_path}.backup" "$script_path"
        exit 1
    fi

    rm -f "${script_path}.backup"
    exit 0
}

# Function to check if a file exists
check_file_exists() {
    local file_path="$1"
    if [[ ! -f "$file_path" ]]; then
        die "File not found: $file_path"
    fi
}

# Check service status based on environment
check_service_status() {
    local env=$1
    debug "Checking service status for environment: $env"

    case "$env" in
    "orbstack")
        if [[ "$OS" == "Darwin" ]]; then
            # First check OrbStack process/socket existence
            if pgrep -f "OrbStack" >/dev/null ||
                launchctl list | grep -q "com.orbstack.OrbStack" ||
                [[ -S "$HOME/.orbstack/run/docker.sock" ]]; then
                
                # Additionally verify Docker is operational by running a simple command
                if docker info >/dev/null 2>&1; then
                    debug "OrbStack is running and Docker is operational"
                    return 0
                else
                    debug "OrbStack process detected but Docker is not operational"
                    return 1
                fi
            fi
            debug "OrbStack is not running"
            return 1
        else
            debug "Checking OrbStack service via pgrep"
            check_service_running "pgrep" "OrbStack"
        fi
        ;;
    "docker")
        if [[ "$OS" == "Darwin" ]]; then
            debug "Checking Docker Desktop service via launchctl"
            if launchctl list | grep -q "com.docker.docker"; then
                # Verify Docker is actually operational
                if docker info >/dev/null 2>&1; then
                    debug "Docker Desktop is running and operational"
                    return 0
                else
                    debug "Docker Desktop process detected but not operational"
                    return 1
                fi
            fi
            return 1
        else
            debug "Checking Docker service via systemctl"
            if systemctl is-active --quiet "docker"; then
                if docker info >/dev/null 2>&1; then
                    debug "Docker service is running and operational"
                    return 0
                else
                    debug "Docker service detected but not operational"
                    return 1
                fi
            fi
            return 1
        fi
        ;;
    *)
        debug "Unknown environment: $env"
        return 1
        ;;
    esac
}

# Check if a service is running
check_service_running() {
    local service_type=$1
    local service_name=$2

    case "$service_type" in
    "launchctl")
        launchctl list | grep -q "$service_name"
        return $?
        ;;
    "pgrep")
        pgrep -x "$service_name" >/dev/null
        return $?
        ;;
    "systemctl")
        systemctl is-active --quiet "$service_name"
        return $?
        ;;
    *)
        return 1
        ;;
    esac
}

# Start a service based on OS and environment
start_service() {
    local env=$1
    local service=$2

    debug "Attempting to start $service ($env, $OS)"

    case "$OS" in
    "Darwin")
        debug "Starting $service with 'open' on macOS"
        open -ga "$service"
        ;;
    "Linux")
        debug "Starting $service on Linux"
        if [[ "$env" == "orbstack" ]]; then
            debug "Using orbstack start command"
            orbstack start
        else
            debug "Using systemctl for Docker"
            sudo systemctl start "$service"
        fi
        ;;
    *)
        die "Unsupported operating system: $OS"
        ;;
    esac

    local max_attempts=30
    local attempt=1

    debug "Waiting up to ${max_attempts}s for $service to start and become operational"

    while [ $attempt -le $max_attempts ]; do
        if check_service_status "$env"; then
            info "$service is ready and operational (after ${attempt}s)"
            return 0
        fi
        debug "Waiting for $service to become operational (attempt $attempt of $max_attempts)..."
        sleep 2
        attempt=$((attempt + 1))
    done

    die "$service could not be started or is not operational (timeout after $((max_attempts*2))s). Please start $service manually."
}

# Function to start Docker environment
start_docker_environment() {
    if [[ -z "${DOCKER_ENVIRONMENT:-}" ]]; then
        die "DOCKER_ENVIRONMENT is not set. Please set it to 'orbstack' or 'docker'"
    fi

    debug "Checking Docker environment: $DOCKER_ENVIRONMENT"

    # Validate Docker environment early
    if [[ "$DOCKER_ENVIRONMENT" != "orbstack" && "$DOCKER_ENVIRONMENT" != "docker" ]]; then
        die "Invalid Docker environment: $DOCKER_ENVIRONMENT. Supported values are: orbstack, docker"
    fi

    case "${DOCKER_ENVIRONMENT}" in
    "orbstack")
        if check_service_status "orbstack"; then
            info "OrbStack is already running and operational"
        else
            info "Starting OrbStack..."
            if ! start_service "orbstack" "/Applications/OrbStack.app"; then
                warn "Failed to automatically start OrbStack. Please start it manually."
                warn "If OrbStack is already running, it might not be fully initialized or is in a broken state."
                warn "Try restarting OrbStack manually and then run the command again."
                exit 1
            fi
        fi
        # Always wait 5 seconds for OrbStack to stabilize
        info "Waiting 5 seconds for OrbStack to fully stabilize..."
        sleep 5
        ;;
    "docker")
        if check_service_status "docker"; then
            info "Docker is already running and operational"
        else
            if [[ "$OS" == "Darwin" ]]; then
                info "Starting Docker Desktop..."
                if ! start_service "docker" "Docker"; then
                    warn "Failed to automatically start Docker Desktop. Please start it manually."
                    exit 1
                fi
            else
                info "Starting Docker service..."
                if ! start_service "docker" "docker"; then
                    warn "Failed to automatically start Docker service. Please start it manually."
                    exit 1
                fi
            fi
        fi
        # Always wait 5 seconds for Docker to stabilize
        info "Waiting 5 seconds for Docker to fully stabilize..."
        sleep 5
        ;;
    esac
}

# Create project structure and initialize configuration
create_project_structure() {
    local project_type=$1
    local project_name=${2:-$(basename "$PWD")}

    debug "Creating project structure for: $project_type ($project_name)"

    # Create basic project structure
    mkdir -p .project/{backups,config,scripts}

    # Create common configuration
    cat >.project/config/common.env <<EOL
APP_ENV=dev
APP_DEBUG=1
COMPOSER_MEMORY_LIMIT=-1
EOL

    # Project specific configurations
    case "$project_type" in
    "symfony")
        debug "Setting up Symfony project configuration"
        cat >.project/config/ddev.yaml <<EOL
name: $project_name
type: php
docroot: public
php_version: "${DEFAULT_PHP_VERSION}"
nodejs_version: "${DEFAULT_NODE_VERSION}"
mysql_version: "${DEFAULT_MYSQL_VERSION}"
webserver_type: nginx-fpm
web_environment:
- DATABASE_URL=mysql://db:db@db:3306/db
- MAILER_DSN=smtp://localhost:1025
- APP_ENV=dev
- APP_DEBUG=1

hooks:
  post-start:
    - exec: composer install
    - exec: bin/console cache:clear
EOL
        ;;
    "shopware")
        debug "Setting up Shopware project configuration"
        cat >.project/config/ddev.yaml <<EOL
name: $project_name
type: shopware6
docroot: shopware/public
php_version: "${DEFAULT_PHP_VERSION}"
nodejs_version: "${DEFAULT_NODE_VERSION}"
mysql_version: "${DEFAULT_MYSQL_VERSION}"
webserver_type: apache-fpm
web_environment:
- DATABASE_URL=mysql://db:db@db:3306/db
- MAILER_DSN=smtp://localhost:1025?encryption=&auth_mode=
- APP_URL=\${DDEV_PRIMARY_URL}
- APP_ENV=dev
- APP_DEBUG=1
- LOCK_DSN=flock

hooks:
  post-start:
    - exec: composer install
    - exec: bin/console cache:clear
    - exec: bin/build-js.sh
EOL

        # Create Shopware specific scripts
        cat >.project/scripts/build-all.sh <<EOL
#!/bin/bash
bin/build-js.sh
bin/build-storefront.sh
bin/build-administration.sh
EOL
        chmod +x .project/scripts/build-all.sh
        ;;
    *)
        die "Unsupported project type: $project_type"
        ;;
    esac

    # Create gitignore if it doesn't exist
    if [[ ! -f ".gitignore" ]]; then
        cat >.gitignore <<EOL
/.project/backups/
/.env.local
/vendor/
/var/
/node_modules/
*.log
.DS_Store
EOL
    fi

    debug "Project structure created successfully"
    return 0
}

# Setup build tools for project
setup_build_tools() {
    local project_type=$1

    debug "Setting up build tools for: $project_type"

    case "$project_type" in
    "symfony")
        debug "Installing Symfony build dependencies"
        ddev composer require --dev symfony/webpack-encore
        ddev npm install
        ;;

    "shopware")
        debug "Installing Shopware build dependencies"
        ddev npm clean-install
        ddev npm run build
        ;;
    esac

    # Create common build scripts
    mkdir -p .project/scripts

    # Create build script
    cat >.project/scripts/build.sh <<EOL
#!/bin/bash
set -e

echo "Building project assets..."
if [ -f "bin/build-js.sh" ]; then
    bin/build-js.sh
fi

if [ -f "bin/build-storefront.sh" ]; then
    bin/build-storefront.sh
fi

if [ -f "bin/build-administration.sh" ]; then
    bin/build-administration.sh
fi

if [ -f "node_modules/.bin/encore" ]; then
    node_modules/.bin/encore production
fi

echo "Build completed successfully"
EOL
    chmod +x .project/scripts/build.sh

    debug "Build tools setup completed"
    return 0
}

# Parse command-line parameters
parse_params() {
    # Initialize all command flags
    init_command_flags

    # Get the command (first argument)
    local command="${1-}"
    [[ -z "$command" ]] && return 0
    shift || true

    case "$command" in
    u | up | start)
        debug "Starting project..."
        start=1
        ;;

    d | down | stop)
        debug "Stopping project..."
        down=1
        ;;

    r | restart)
        debug "Restarting project..."
        restart=1
        ;;

    st | sta | stat | status | info)
        debug "Showing project status..."
        status=1
        ;;

    o | launch)
        debug "Opening in browser..."
        launch=1
        launchparam="${1-}"
        [[ -n "$launchparam" ]] && shift
        ;;

    ssh)
        debug "Connecting via SSH..."
        ssh=1
        ;;

    # Database commands
    e | export)
        debug "Exporting database..."
        exportdb=1
        exportdbparam="${1-.project/db.sql.gz}"
        [[ -n "$exportdbparam" ]] && shift
        ;;

    i | import)
        debug "Importing database..."
        importdb=1
        importdbparam="${1-.project/db.sql.gz}"
        [[ -n "$importdbparam" ]] && shift
        ;;

    se | seq | sequelace)
        debug "Starting Sequel Ace..."
        sequelace=1
        ;;

    dami | da:mi | database:migrate)
        debug "Running database migrations..."
        console=1
        consoleparam="database:migrate ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    damiall | da:mi:all | database:migrate:all)
        debug "Running all database migrations..."
        console=1
        consoleparam="database:migrate --all"
        ;;

    # Development commands
    x | xdebug)
        debug "Toggling xdebug..."
        xdebug=1
        xdebugparam="${1-on}"
        [[ -n "${1-}" ]] && shift
        ;;

    t | test)
        debug "Running tests..."
        test=1
        testparam="${1-}"
        [[ -n "$testparam" ]] && shift
        ;;

    l | logs)
        debug "Showing logs..."
        logs=1
        ;;

    m | ma | mail)
        debug "Starting mail server..."
        mail=1
        ;;

    dr | de:ro | debug:router)
        debug "Running debug:router..."
        console=1
        consoleparam="debug:router"
        ;;

    # Composer commands
    c | com | composer)
        debug "Running composer command..."
        composer=1
        composerparam="${1-}"
        [[ -n "$composerparam" ]] && shift
        ;;

    cup | update)
        debug "Updating dependencies..."
        composer=1
        composerparam="update"
        ;;

    cin | install)
        debug "Installing dependencies..."
        composer=1
        composerparam="install"
        ;;

    cre | require)
        debug "Adding package..."
        require=1
        requireparam="${1-}"
        [[ -n "$requireparam" ]] && shift
        ;;

    crm | remove)
        debug "Removing package..."
        remove=1
        removeparam="${1-}"
        [[ -n "$removeparam" ]] && shift
        ;;

    ca | cda | dump-autoload)
        debug "Updating autoloader..."
        composer=1
        composerparam="dump-autoload"
        ;;

    src | source | prefer-source)
        debug "Setting prefer-source..."
        prefersource=1
        prefersourceparam="${1-}"
        [[ -n "$prefersourceparam" ]] && shift
        ;;

    # Shopware commands
    b | build)
        debug "Building components..."
        build=1
        buildparam="${1-}"
        [[ -n "$buildparam" ]] && shift
        ;;

    ba | build:administration)
        debug "Building administration..."
        build=1
        buildparam="administration"
        ;;

    bs | build:storefront)
        debug "Building storefront..."
        build=1
        buildparam="storefront"
        ;;

    bj | build:js | all)
        debug "Building JavaScript..."
        build=1
        buildparam="js"
        ;;

    w | watch)
        debug "Watching components..."
        watch=1
        watchparam="${1-}"
        [[ -n "$watchparam" ]] && shift
        ;;

    wa | wa:ad | watch:administration)
        debug "Watching administration..."
        watch=1
        watchparam="administration"
        ;;

    ws | wa:st | watch:storefront)
        debug "Watching storefront..."
        watch=1
        watchparam="storefront"
        ;;

    cd | cade | ca:de | cache:delete)
        debug "Deleting cache..."
        deletecache=1
        ;;

    cc | cacl | ca:cl | cache:clear)
        debug "Clearing cache..."
        console=1
        consoleparam="cache:clear"
        ;;

    mc | meco | me:co | messenger:consume)
        debug "Starting messenger consumer..."
        console=1
        consoleparam="messenger:consume"
        ;;

    # Plugin commands
    plre | pl:re | plugin:refresh)
        debug "Refreshing plugins..."
        console=1
        consoleparam="plugin:refresh"
        ;;

    pl | pli | plli | pl:li | plugin:list)
        debug "Listing plugins..."
        console=1
        consoleparam="plugin:list"
        ;;

    plac | pl:ac | plugin:activate)
        debug "Activating plugin..."
        console=1
        consoleparam="plugin:activate ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    plin | pl:in | plugin:install)
        debug "Installing plugin..."
        console=1
        consoleparam="plugin:install ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    plun | pl:un | plugin:uninstall)
        debug "Uninstalling plugin..."
        console=1
        consoleparam="plugin:uninstall ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    pu | plup | pl:up | plugin:update)
        debug "Updating plugin..."
        console=1
        consoleparam="plugin:update ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    plde | pl:de | plugin:deactivate)
        debug "Deactivating plugin..."
        console=1
        consoleparam="plugin:deactivate ${1-}"
        [[ -n "${1-}" ]] && shift
        ;;

    # Project commands
    n | new)
        debug "Creating new project..."
        new=1
        newparam="${1-}"
        if [[ -z "$newparam" ]]; then
            read -r -p "Project type (symfony|shopware): " newparam
        else
            shift
        fi

        # Normalize project type
        case "$newparam" in
        symfony | sy | sym)
            newparam="symfony"
            ;;
        shopware | sw | sh | sho | shop)
            newparam="shopware"
            ;;
        *)
            die "Unknown project type: $newparam. Use symfony or shopware"
            ;;
        esac
        ;;

    init)
        debug "Initializing project..."
        init=1
        ;;

    bk | backup)
        debug "Creating backup..."
        backup=1
        ;;

    rs | restore)
        debug "Restoring from backup..."
        restore=1
        restoreparam="${1-}"
        [[ -n "$restoreparam" ]] && shift
        ;;

    upgrade)
        debug "Upgrading script..."
        upgrade
        ;;

    *)
        debug "Executing command in container: $command $*"
        ddev exec "$command" "$@"
        ;;
    esac

    return 0
}

# Initialize command flags
init_command_flags() {
    # Project commands
    new=0
    newparam=""
    start=0
    down=0
    restart=0
    status=0
    init=0
    ssh=0

    # Database commands
    exportdb=0
    exportdbparam=""
    importdb=0
    importdbparam=""
    sequelace=0

    # Development commands
    xdebug=0
    xdebugparam=""
    test=0
    testparam=""
    logs=0
    mail=0
    deletecache=0

    # Console commands
    console=0
    consoleparam=""
    no_deprecations=0
    verbose=0

    # Build commands
    build=0
    buildparam=""
    watch=0
    watchparam=""

    # Composer commands
    composer=0
    composerparam=""
    require=0
    requireparam=""
    remove=0
    removeparam=""

    # Package commands
    packages=0
    packagesparam=""
    prefersource=0
    prefersourceparam=""

    # Launch commands
    launch=0
    launchparam=""

    # Backup commands
    backup=0
    restore=0
    restoreparam=""

    # System flags
    version=0
    lint=0
    NO_COLOR=0
}

# Main execution
main() {
    # Setup colors first
    setup_colors

    # Enable debug logging if set
    if [[ "${LOG_LEVEL:-}" == "DEBUG" ]]; then
        debug "Debug mode enabled"
        debug "Operating system: $OS"
        debug "Docker environment: ${DOCKER_ENVIRONMENT:-not set}"
    fi

    # Handle global options
    while [[ "${1-}" =~ ^- ]]; do
        case "${1-}" in
        --no-color)
            NO_COLOR=1
            shift
            ;;
        --no-deprecations)
            no_deprecations=1
            shift
            ;;
        -vv | --verbose)
            verbose=1
            shift
            ;;
        -v | --version)
            version
            exit 0
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            break
            ;;
        esac
    done

    # No arguments provided
    if [ $# -eq 0 ]; then
        default
        exit 0
    fi

    # Parse and execute commands
    parse_params "$@"
    execute_commands

    exit 0
}

# Remove unreachable version check in execute_commands
execute_commands() {
    # First, ensure Docker environment is running for any DDEV-related commands
    if [[ $console == 1 ]] || [[ $composer == 1 ]] || [[ $build == 1 ]] ||
        [[ $watch == 1 ]] || [[ $exportdb == 1 ]] || [[ $importdb == 1 ]] ||
        [[ $init == 1 ]] || [[ $test == 1 ]] || [[ $backup == 1 ]] ||
        [[ $restore == 1 ]] || [[ $packages == 1 ]] || [[ $new == 1 ]] ||
        [[ $start == 1 ]] || [[ $down == 1 ]] || [[ $restart == 1 ]] ||
        [[ $status == 1 ]] || [[ $ssh == 1 ]] || [[ $sequelace == 1 ]] ||
        [[ $launch == 1 ]] || [[ $deletecache == 1 ]]; then
        
        # Start the Docker environment before proceeding
        debug "Ensuring Docker environment is running..."
        start_docker_environment
        
        # Check if DDEV is installed
        if ! command -v ddev &>/dev/null; then
            die "ddev is not installed. Please install ddev first."
        fi
    fi

    # Execute console commands
    if [[ $console == 1 ]]; then
        debug "Executing console command: $consoleparam"
        local console_flags=""
        
        # Add --no-deprecations flag by default for Shopware console commands
        if [[ -f "bin/console" && -d "vendor/shopware" ]]; then
            console_flags+=" --no-deprecations"
            debug "Automatically adding --no-deprecations flag for Shopware"
        fi
        
        # Still respect explicit flag if set
        [[ $no_deprecations == 1 ]] && console_flags+=" --no-deprecations"
        [[ $verbose == 1 ]] && console_flags+=" -v"
        
        ddev exec bin/console $console_flags "$consoleparam"
    fi

    # Run composer commands
    if [[ $composer == 1 ]]; then
        debug "Running composer command: $composerparam"
        ddev composer "$composerparam"
    fi

    # Handle package requirements
    if [[ $require == 1 ]]; then
        debug "Adding package: $requireparam"
        if [[ $prefersource == 1 ]]; then
            ddev composer require "$requireparam" --prefer-source
        else
            ddev composer require "$requireparam"
        fi
    fi

    # Handle package removal
    if [[ $remove == 1 ]]; then
        debug "Removing package: $removeparam"
        ddev composer remove "$removeparam"
    fi

    # Build shopware components
    if [[ $build == 1 ]]; then
        debug "Building components: $buildparam"
        case "$buildparam" in
        "storefront" | "store" | "s")
            ddev exec bin/build-storefront.sh
            ;;
        "administration" | "admin" | "a")
            ddev exec bin/build-administration.sh
            ;;
        "js" | "javascript" | "j")
            ddev exec bin/build-js.sh
            ;;
        *)
            warn "Unknown build component: $buildparam"
            ;;
        esac
    fi

    # Watch components
    if [[ $watch == 1 ]]; then
        debug "Watching components: $watchparam"
        case "$watchparam" in
        "storefront" | "store" | "s")
            ddev exec bin/watch-storefront.sh
            ;;
        "administration" | "admin" | "a")
            ddev exec bin/watch-administration.sh
            ;;
        *)
            warn "Unknown watch component: $watchparam"
            ;;
        esac
    fi

    # Database operations
    if [[ $exportdb == 1 ]]; then
        debug "Exporting database to: $exportdbparam"
        ddev export-db -f "$exportdbparam"
    fi

    if [[ $importdb == 1 ]]; then
        debug "Importing database from: $importdbparam"
        check_file_exists "$importdbparam"
        ddev import-db -f "$importdbparam"
    fi

    # Project operations
    if [[ $start == 1 ]]; then
        debug "Starting project..."
        ddev start
        ddev describe
    fi

    if [[ $down == 1 ]]; then
        debug "Stopping project..."
        ddev stop
    fi

    if [[ $restart == 1 ]]; then
        debug "Restarting project..."
        ddev restart
        ddev describe
    fi

    if [[ $status == 1 ]]; then
        debug "Showing project status..."
        ddev describe
    fi

    # Direct command execution
    if [[ $ssh == 1 ]]; then
        debug "Opening SSH connection..."
        ddev ssh
    fi

    if [[ $sequelace == 1 ]]; then
        debug "Starting Sequel Ace..."
        ddev sequelace
    fi

    if [[ $launch == 1 ]]; then
        if [[ -n "$launchparam" ]]; then
            debug "Opening specific URL: $launchparam"
            ddev launch "$launchparam"
        else
            debug "Opening default project URL..."
            ddev launch
        fi
    fi

    # Cache operations
    if [[ $deletecache == 1 ]]; then
        debug "Deleting cache files..."
        ddev exec rm -rf var/cache/dev*
        ddev exec rm -rf var/cache/prod*
    fi

    # Testing
    if [[ $test == 1 ]]; then
        debug "Running tests: ${testparam-}"
        ddev exec php bin/phpunit "${testparam-}"
    fi

    # Initialize project
    if [[ $init == 1 ]]; then
        debug "Initializing project..."
        read -r -p "Initialize DEV Environment? This will overwrite db and .env.local (y/n)?" choice
        case "$choice" in
        y | Y)
            info "Starting initialization..."
            check_file_exists ".project/init.sql.gz"
            check_file_exists ".project/env.ddev"
            ddev exec cp .env.ddev .env.local
            ddev start
            ddev import-db -f .project/init.sql.gz
            ddev describe
            ;;
        *)
            info "Initialization cancelled"
            ;;
        esac
    fi

    # Backup and restore
    if [[ $backup == 1 ]]; then
        debug "Creating backup..."
        mkdir -p "$BACKUP_DIR"
        local backup_file
        backup_file="${BACKUP_DIR}/backup-$(date '+%Y-%m-%d-%H-%M-%S').tar.gz"
        ddev exec tar -czf "$backup_file" .
        info "Backup created: $backup_file"
    fi

    if [[ $restore == 1 ]]; then
        debug "Restoring from backup: ${restoreparam-backup.tar.gz}"
        check_file_exists "${restoreparam-backup.tar.gz}"
        ddev exec tar -xzf "${restoreparam-backup.tar.gz}"
        info "Project restored from: ${restoreparam-backup.tar.gz}"
    fi

    # Mail server
    if [[ $mail == 1 ]]; then
        debug "Starting mail server..."
        ddev mailhog
    fi

    # Package handling
    if [[ $packages == 1 ]]; then
        debug "Processing packages..."
        process_packages
    fi

    # Remove unnecessary variables
    unset RED GREEN sequelace logs down xdebug ssh start deletecache restart status \
        update install require requireparam prune upgrade poweroff version lint \
        launch launchparam remove removeparam mail NO_COLOR args

    return 0
}

# Function to process packages and create symlinks
process_packages() {
    debug "Processing packages..."
    local base_dir="./"
    local vendor_dir="$base_dir/vendor"
    local plugins_dir="$base_dir/custom/plugins"

    # Create plugins directory if it doesn't exist
    mkdir -p "$plugins_dir"

    # Process store packages
    debug "Processing store packages..."
    if ! find "$vendor_dir/store.shopware.com" -name "composer.json" -type f -maxdepth 2 2>/dev/null | while read -r store_composer_file; do
        local path
        local link_name
        local link_path

        path=$(dirname "$store_composer_file" | sed "s|$vendor_dir/||")
        link_name=$(create_package_name "$path")
        link_path="$plugins_dir/$link_name"

        if [[ $packagesparam == "true" ]]; then
            debug "Creating symlink for $link_name"
            [ -L "$link_path" ] && unlink "$link_path"
            [ -d "$link_path" ] && rmdir "$link_path"
            ln -s "../../vendor/$path" "$link_path"
            info "Created symlink for $link_name"
        else
            echo "$link_name"
        fi
    done; then
        warn "No store packages found or error processing packages"
    fi
}

# Function to create a standardized package name
create_package_name() {
    if [[ $# -ne 1 ]]; then
        die "Usage: create_package_name <path>"
    fi

    local path="$1"
    local vendor
    local name

    vendor=$(echo "$path" | cut -d'/' -f1)
    name=$(echo "$path" | cut -d'/' -f2)

    # Capitalize first letter of vendor
    vendor="${vendor^}"

    # Convert kebab-case to PascalCase
    name=$(echo "$name" | sed -e 's/-/ /g' -e 's/\b\(.\)/\u\1/g' -e 's/ //g')

    echo "$vendor$name"
}

# Start execution
main "$@"
