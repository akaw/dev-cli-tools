#!/usr/bin/env bash

# This script provides shortcuts for common ddev, shopware and other tools commands.
#
# Author: Andre Witte
#
# Description: dDEV shortening tools
# Usage: dev [OPTIONS] [PARAMETERS]
# Version: 1.1.4
# https://github.com/akaw/dev-cli-tools/
#
# shellcheck disable=SC2034,SC2168,SC2317

# Default Configuration
VERSION="1.1.4"
DOCKER_ENVIRONMENT="${DOCKER_ENVIRONMENT:-orbstack}"
BACKUP_DIR="${BACKUP_DIR:-.project/backups}"
DB_EXPORT_FILE="${DB_EXPORT_FILE:-.project/db.sql.gz}"
DEFAULT_PHP_VERSION="${DEFAULT_PHP_VERSION:-8.2}"
DEFAULT_NODE_VERSION="${DEFAULT_NODE_VERSION:-20}"
LOG_LEVEL="${LOG_LEVEL:-INFO}"
LOG_FILE="${LOG_FILE:-dev.log}"

OS=$(uname -s)

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# Define script directory
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

# Log level
log_level=1

# Logging Konfiguration
LOG_FILE="${SCRIPT_DIR}/${LOG_FILE}"
LOG_LEVEL=${LOG_LEVEL:-"INFO"} # DEBUG, INFO, WARN, ERROR

# Erweiterte Farbdefinitionen
declare -A COLORS=(
    [RESET]='\033[0m'
    [BOLD]='\033[1m'
    [DIM]='\033[2m'
    [ITALIC]='\033[3m'
    [DEBUG]='\033[0;36m'     # Cyan
    [INFO]='\033[0;32m'      # Grün
    [WARN]='\033[0;33m'      # Gelb
    [ERROR]='\033[0;31m'     # Rot
    [TIMESTAMP]='\033[0;90m' # Hellgrau
)

# Verbesserte Log-Funktion
log() {
    local level=$1
    local message=$2
    local timestamp
    timestamp="$(date '+%Y-%m-%d %H:%M:%S')"

    # Prüfe ob Logging für dieses Level aktiviert ist
    [[ $level == "DEBUG" && $LOG_LEVEL != "DEBUG" ]] && return

    # Formatierte Ausgabe
    local output="${COLORS[TIMESTAMP]}${timestamp}${COLORS[RESET]} "
    output+="${COLORS[BOLD]}${COLORS[$level]}${level}${COLORS[RESET]} "
    output+="${message}"

    # Console Output mit Formatierung
    echo -e "$output"

    # File Output ohne Formatierung
    echo "[${timestamp}] ${level}: ${message}" >>"${LOG_FILE}"
}

# Spezifische Logging-Funktionen
debug() { log "DEBUG" "$1"; }
info() { log "INFO" "$1"; }
warn() { log "WARN" "$1"; }
error() { log "ERROR" "$1" >&2; }

# Ersetze die alte die() Funktion
die() {
    error "$1"
    exit "${2:-1}"
}

# Display usage information
usage() {
    cat <<EOF
$(basename "${BASH_SOURCE[0]}") - Development Command Line Tools v${VERSION}

USAGE:
    $(basename "${BASH_SOURCE[0]}") [OPTION] COMMAND [ARGS]

OPTIONS:
    -h,  --help            Show this help
    -v,  --version         Show version
         --no-color        Disable colored output

PROJECT:
    u,   up               Start project
    d,   down            Stop project
    r,   restart         Restart project
    st,  status          Show project status
    o,   open            Open in browser
    init                 Initialize project

DATABASE:
    e,   export [file]   Export database (.project/db.sql.gz)
    i,   import [file]   Import database
    seq, sequelace       Start Sequel Ace
    da:mi                Run database migrations

DEVELOPMENT:
    x,   xdebug         Enable/disable xdebug (on|off)
    t,   test           Run tests [options]
    l,   logs           Show logs
    m,   mail           Start mail server

COMPOSER:
    c,   composer       Run composer command
    cup, update         Update dependencies
    cin, install        Install dependencies
    cre, require        Add package [pkg]
    crm, remove         Remove package [pkg]
    cda                 Update autoloader

SHOPWARE:
    b,   build [comp]   Build components (storefront|admin|js)
    w,   watch [comp]   Watch components
    cc                  Clear cache
    pl:re               Refresh plugins
    pl:li               List plugins
    pl:ac [plugin]      Activate plugin
    pl:de [plugin]      Deactivate plugin

PROJECT:
    n,   new [type]     Create new project (symfony|shopware)
    bk,  backup         Create backup
    rs,  restore        Restore backup
    upgrade             Update script

Examples:
    dev up                 Start project
    dev composer install   Install dependencies
    dev new shopware       Create new Shopware project
EOF
    exit 0
}

# Einfache Versionierung und Meldungsausgabe
version() {
    echo -e "dev-cli-tools ${VERSION}\nhttps://github.com/akaw/dev-cli-tools/"
    exit 0
}

# Cleanup function to handle script termination
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # Beende alle laufenden Prozesse
    jobs -p | xargs -r kill
    # Lösche temporäre Dateien falls vorhanden
    if [ -n "${TEMP_DIR-}" ] && [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"
    fi
}

# Vereinfachte Farbausgabe
setup_colors() {
    NOFORMAT='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
}

# Einfache Meldungsausgabe
msg() {
    echo "$1"
}

# Default function to start the development environment
# This function is called when no arguments are provided
# u = up, seq = sequelace, l = logs, o = open in browser
default() {
    start_docker_environment
    sleep 3
    dev u
    dev info
    dev seq
    dev o
    code .
}

# Function to upgrade the script
upgrade() {
    local script_path="${BASH_SOURCE[0]}"
    echo "Loading latest version..."

    # Create backup
    cp "$script_path" "${script_path}.backup"

    if curl -o "$script_path" "https://raw.githubusercontent.com/akaw/dev-cli-tools/main/dev"; then
        chmod +x "$script_path"
        echo "Update successful!"
        # Hole die neue Version direkt aus dem Skript
        VERSION=$(grep -m 1 "^VERSION=" "$script_path" | cut -d'"' -f2)
        echo "New version: ${VERSION}"
    else
        echo "Update failed. Restoring backup..."
        mv "${script_path}.backup" "$script_path"
        exit 1
    fi

    rm -f "${script_path}.backup"
    exit 0
}

# Function to check if a file exists
check_file_exists() {
    local file_path="$1"
    if [[ ! -f "$file_path" ]]; then
        die "File not found: $file_path"
    fi
}

# Function to decide whether to start OrbStack or Docker based on an environment variable and OS type
start_docker_environment() {
    if [[ "${DOCKER_ENVIRONMENT:-}" == "orbstack" ]]; then
        if [[ "$OS" == "Darwin" ]]; then
            # macOS
            if ! launchctl list | grep -q "com.orbstack.OrbStack"; then
                echo "Starting OrbStack environment..."
                open -ga /Applications/OrbStack.app
                sleep 3
            else
                echo "Orbstack is running"
            fi
        elif [[ "$OS" == "Linux" ]]; then
            # Linux
            if pgrep -x "OrbStack" >/dev/null; then
                echo "Starting OrbStack environment..."
                orbstack start
                sleep 3
            else
                echo "Orbstack is running"
            fi
        else
            die "Unsupported OS: $OS"
        fi
    elif [[ "${DOCKER_ENVIRONMENT:-}" == "docker" ]]; then
        if [[ "$OS" == "Darwin" ]]; then
            # macOS
            if ! launchctl list | grep -q "com.docker.docker"; then
                echo "Starting Docker Desktop environment..."
                open -ga "Docker"
                sleep 3
            else
                die "Docker Desktop is not running. Please start Docker Desktop first."
            fi
        elif [[ "$OS" == "Linux" ]]; then
            # Linux
            if systemctl is-active --quiet docker; then
                echo "Docker service is already running."
            else
                echo "Starting Docker service..."
                sudo systemctl start docker
            fi
        else
            die "Unsupported OS: $OS"
        fi
    else
        die "Unknown or unset DOCKER_ENVIRONMENT. Please set it to 'orbstack' or 'docker'."
    fi
}

# Parse command-line parameters
parse_params() {
    # default values of variables set from params
    exportdb=0
    exportdbparam=""
    importdb=0
    importdbparam=""
    sequelace=0
    logs=0
    launch=0
    down=0
    mail=0
    xdebug=0
    new=0
    newparam=""
    start=0
    init=0
    xdebugparam=""
    ssh=0
    console=0
    consoleparam=""
    build=0
    buildparam=""
    start=0
    deletecache=0
    test=0
    testparam=""
    restart=0
    status=0
    backup=0
    restore=0
    restoreparam=""
    update=0
    install=0
    composer=0
    require=0
    requireparam=""
    remove=0
    removeparam=""
    prune=0
    upgrade=0
    poweroff=0
    packages=0
    packagesparam=""
    prefersource=0
    prefersourceparam=""
    version=0
    lint=0
    watch=0
    launch=0
    launchparam=""

    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -vvv | --verbose) set -x ;;
        -v | --version)
            version
            ;;
        s | ssh)
            echo "Connecting to project via SSH..."
            ddev ssh
            shift
            ;;
        ba | build:administration)
            build=1
            buildparam="administration"
            shift
            ;;
        bs | build:storefront)
            build=1
            buildparam="storefront"
            shift
            ;;
        bj | build:js | all)
            build=1
            buildparam="js"
            shift
            ;;
        e | export)
            exportdb=1
            exportdbparam="${2-}"
            [[ -z "${exportdbparam}" ]] && exportdbparam=".project/db.sql.gz"
            shift
            ;;
        i | import)
            importdb=1
            importdbparam="${2-}"
            [[ -z "${importdbparam}" ]] && importdbparam=".project/db.sql.gz"
            shift 2
            ;;
        se | seq | sequelace)
            echo "Starting Sequel Ace..."
            ddev sequelace
            shift
            ;;
        l)
            echo "Printing continuous logs..."
            tail -f "./var/log/dev-$(date '+%Y-%m-%d').log"
            shift
            ;;
        o | launch)
            if [[ -z "${2-}" ]]; then
                echo "Open default project webpage..."
                ddev launch
                shift
            else
                echo "Open ${2-}"
                ddev launch "${2-}"
                shift 2
            fi
            ;;
        u | up | start)
            echo "Starting project..."
            ddev start
            shift
            ;;
        d | down | stop)
            echo "Stopping project..."
            ddev stop
            shift
            ;;
        dr | de:ro | debug:router)
            console=1
            consoleparam="debug:router"
            shift
            ;;
        n | new)
            new=1
            newparam="${2-}"
            if [[ -z "${newparam}" ]]; then
                read -r -p "Please provide project type (symfony|shopware): " newparam
            fi
            case "$newparam" in
            symfony | sy | sym)
                newparam="symfony"
                ;;
            shopware | sw | sh | sho | shop)
                newparam="shopware"
                ;;
            *)
                die "Unknown project type: $newparam. Use symfony or shopware"
                ;;
            esac
            shift
            ;;
        logs)
            echo "Printing continuous logs..."
            ddev logs -f
            shift
            ;;
        x | xdebug)
            [[ -z "${xdebugparam-}" ]] && xdebugparam="on"
            ddev xdebug "${2-}"
            shift 2
            ;;
        t | test)
            test=1
            testparam="${2-}"
            shift 2
            ;;
        poweroff)
            echo "power off ddev..."
            ddev poweroff
            shift
            ;;
        r | restart)
            echo "Restarting project..."
            ddev restart
            shift
            ;;
        st | sta | stat | status | info)
            ddev describe
            shift
            ;;
        bk | backup)
            backup=1
            shift
            ;;
        rs | restore)
            restore=1
            restoreparam="${2-}"
            shift 2
            ;;
        cpa | packages)
            packages=1
            packagesparam="true"
            shift
            ;;
        cli | com:list | composer:list)
            packages=1
            shift
            ;;
        com | composer)
            composer=1
            composerparam="${2-}"
            shift 2
            ;;
        cup | update)
            composer=1
            composerparam="update"
            shift
            ;;
        cin | install)
            composer=1
            composerparam="install"
            shift
            ;;
        cre | require)
            composer=1
            composerparam="require ${2-}"
            shift 2
            ;;
        src | source | prefer-source)
            prefersource=1
            prefersourceparam="${2-}"
            shift 2
            ;;
        crm | remove)
            remove=1
            removeparam="${2-}"
            shift 2
            ;;
        cda | dump-autoload)
            composer=1
            composerparam="dump-autoload"
            shift
            ;;
        cd | cade | ca:de | cache:delete)
            echo "Deleting cache..."
            ddev exec rm -rf var/cache/dev*
            ddev exec rm -rf var/cache/prod*
            shift
            ;;
        cc | cacl | ca:cl | cache:clear)
            console=1
            consoleparam="cache:clear"
            shift
            ;;
        mc | meco | me:co | messenger:consume)
            console=1
            consoleparam="messenger:consume"
            shift
            ;;
        plre | pl:re | plugin:refresh)
            console=1
            consoleparam="plugin:refresh"
            shift
            ;;
        pl | pli | plli | pl:li | plugin:list)
            console=1
            consoleparam="plugin:list"
            shift
            ;;
        plac | pl:ac | plugin:activate)
            console=1
            consoleparam="plugin:activate ${2-}"
            shift 2
            ;;
        plin | pl:in | plugin:install)
            console=1
            consoleparam="plugin:install ${2-}"
            shift 2
            ;;
        plun | pl:un | plugin:uninstall)
            console=1
            consoleparam="plugin:uninstall ${2-}"
            shift 2
            ;;
        plup | pl:up | plugin:update)
            console=1
            consoleparam="plugin:update ${2-}"
            shift 2
            ;;
        plde | pl:de | plugin:deactivate)
            console=1
            consoleparam="plugin:deactivate ${2-}"
            shift 2
            ;;
        dami | da:mi | database:migrate)
            console=1
            consoleparam="database:migrate ${2-}"
            shift 2
            ;;
        damiall | da:mi:all | database:migrate:all)
            console=1
            consoleparam="database:migrate --all"
            shift
            ;;
        w | watch)
            watch=1
            watchparam="${2-}"
            shift 2
            ;;
        wa | wa:ad | watch:administration)
            watch=1
            watchparam="administration"
            shift
            ;;
        ws | wa:st | watch:storefront)
            watch=1
            watchparam="storefront"
            shift
            ;;
        c | con | console)
            console=1
            consoleparam="${2-}"
            shift 2
            ;;
        init)
            init=1
            read -r -p "Initialize DEV Environment it will overwrite db and .env.local (y/n)?" choice
            case "$choice" in
            y | Y)
                echo "Initializing project..."
                check_file_exists ".project/init.sql.gz"
                check_file_exists ".project/env.ddev"
                ddev exec cp .env.ddev .env.local
                ddev start
                ddev import-db -f .project/init.sql.gz
                ddev describe
                ;;
            *) usage ;;
            esac
            shift
            ;;
        upgrade)
            upgrade
            shift
            ;;
        lint)
            echo "Running linting tools..."
            ddev exec npm run lint
            shift
            ;;
        --no-color)
            NO_COLOR=1
            shift
            ;;
        ?*)
            usage
            die "Unknown option: $1"
            ;;
        *) break ;;
        esac
    done

    return 0
}

# Main execution
main() {
    # Setup colors first
    setup_colors

    # Handle global options
    while [[ "${1-}" =~ ^- ]]; do
        case "${1-}" in
        --no-color)
            NO_COLOR=1
            shift
            ;;
        -v | --version)
            version
            exit 0
            ;;
        -h | --help)
            usage
            exit 0
            ;;
        *)
            break
            ;;
        esac
    done

    # Check if no arguments provided
    if [ $# -eq 0 ]; then
        default
        exit 1
    fi

    # Parse remaining parameters
    parse_params "$@"

    # Execute commands based on parsed parameters
    execute_commands "$@"
}

# Remove unreachable version check in execute_commands
execute_commands() {
    # Only check for ddev if we're executing commands that need it
    if [[ $console == 1 ]] || [[ $composer == 1 ]] || [[ $build == 1 ]] ||
        [[ $watch == 1 ]] || [[ $exportdb == 1 ]] || [[ $importdb == 1 ]] ||
        [[ $init == 1 ]] || [[ $test == 1 ]] || [[ $backup == 1 ]] ||
        [[ $restore == 1 ]] || [[ $packages == 1 ]] || [[ $new == 1 ]]; then
        if ! command -v ddev &>/dev/null; then
            die "ddev is not installed. Please install ddev first."
        fi
    fi

    # Execute commands
    if [[ $console == 1 ]]; then
        echo "Executing console command: $consoleparam"
        ddev exec console "$consoleparam"
    fi

    # Run composer commands
    if [[ $composer == 1 ]]; then
        echo "Updating project dependencies..."
        ddev composer "$composerparam"
        echo "Project dependencies updated"
    fi

    # Build shopware components
    if [[ $build == 1 ]]; then
        echo "Building project components: $buildparam"
        if [[ $buildparam == "storefront" ]]; then
            ddev exec bin/build-storefront.sh
        fi
        if [[ $buildparam == "administration" ]]; then
            ddev exec bin/build-administration.sh
        fi
        if [[ $buildparam == "js" ]]; then
            ddev exec bin/build-js.sh
        fi
    fi

    if [[ $watch == 1 ]]; then
        if [[ -z "${watchparam}" || $watchparam == "storefront" || $watchparam == "store" || $watchparam == "s" ]]; then
            echo "watching storefront"
            ddev exec bin/watch-storefront.sh
        fi
        if [[ $watchparam == "administration" || $watchparam == "admin" || $watchparam == "a" ]]; then
            echo "watching administration"
            ddev exec bin/watch-administration.sh
        fi
    fi

    # Export the database
    if [[ $exportdb == 1 ]]; then
        echo "Exporting database..."
        ddev export-db -f "$exportdbparam"
    fi

    # Import the database
    if [[ $importdb == 1 ]]; then
        echo "Importing database $importdbparam... "
        check_file_exists "$importdbparam"
        ddev import-db -f "$importdbparam"
    fi

    # Initialize the project
    if [[ $init == 1 ]]; then
        read -r -p "Initialize DEV Environment it will overwrite db and .env.local (y/n)?" choice
        case "$choice" in
        y | Y)
            echo "Initializing project..."
            check_file_exists ".project/init.sql.gz"
            check_file_exists ".project/env.ddev"
            ddev exec cp .env.ddev .env.local
            ddev start
            ddev import-db -f .project/init.sql.gz
            ddev describe
            ;;
        *) usage ;;
        esac
    fi

    # Run tests
    if [[ $test == 1 ]]; then
        echo "Running tests: $testparam"
        [[ -z "${testparam-}" ]] && testparam=""
        ddev exec php bin/phpunit "$testparam"
    fi

    # Create a backup
    if [[ $backup == 1 ]]; then
        echo "Creating backup..."
        ddev exec tar -czf backup.tar.gz .
        echo "Backup created: backup.tar.gz"
    fi

    # Restore the project from a backup
    if [[ $restore == 1 ]]; then
        echo "Restoring project from backup: $restoreparam"
        [[ -z "${restoreparam-}" ]] && restoreparam="backup.tar.gz"
        ddev exec tar -xzf "$restoreparam"
        echo "Project restored from: $restoreparam"
    fi

    # Process packages
    process_packages() {
        local base_dir="./"
        local vendor_dir="$base_dir/vendor"
        local plugins_dir="$base_dir/custom/plugins"

        find "$vendor_dir/store.shopware.com" -name "composer.json" -type f -maxdepth 2 | while read -r store_composer_file; do
            local path
            local link_name
            local link_path

            path=$(dirname "$store_composer_file" | sed "s|$vendor_dir/||")
            link_name=$(create_package_name "$path")
            link_path="$plugins_dir/$link_name"

            if [ "$packagesparam" = true ]; then
                [ -L "$link_path" ] && unlink "$link_path"
                [ -d "$link_path" ] && rmdir "$link_path"
                ln -s "../../vendor/$path" "$link_path"
            else
                echo "$link_name"
            fi
        done
    }

    if [[ $packages == 1 ]]; then
        process_packages
    fi

    create_package_name() {
        if [[ $# -ne 1 ]]; then
            die "Usage: create_package_name <path>"
        fi

        local path="$1"
        local vendor
        local name

        vendor=$(echo "$path" | cut -d'/' -f1)
        name=$(echo "$path" | cut -d'/' -f2)
        vendor="${vendor^}"
        name=$(echo "$name" | sed -e 's/-/ /g' -e 's/\b\(.\)/\u\1/g' -e 's/ //g')
        echo "$vendor$name"
    }

    # Create a new project
    if [[ $new == 1 ]]; then
        echo "Creating new project: $newparam"

        if [[ $newparam == "symfony" ]]; then
            ddev config --docroot=public
            ddev composer create symfony/skeleton .
            ddev composer require webapp
            ddev start
        elif [[ $newparam == "shopware" ]]; then
            echo "Configuring ddev shopware project..."
            ddev config --project-type=shopware6 \
                --disable-settings-management \
                --docroot=shopware/public \
                --create-docroot \
                --web-working-dir=/var/www/html/shopware \
                --database=mysql:8.0 \
                --php-version=8.2 \
                --nodejs-version=20 \
                --webserver-type=apache-fpm \
                --web-environment-add="DATABASE_URL=mysql://db:db@db:3306/db,MAILER_DSN=smtp://localhost:1025?encryption=&auth_mode=,APP_URL=\${DDEV_PRIMARY_URL},APP_DEBUG=1,APP_ENV=dev"

            ddev start

            echo "Creating shopware project..."
            ddev exec "cd /var/www/html && rm -rf shopware/ && composer create-project shopware/production shopware -n"

            echo "Installing Shopware..."
            ddev exec bin/console system:install --basic-setup --shop-locale=de-DE
            ddev exec bin/console cache:clear
        fi
        mkdir -p .project
    fi

    # Remove unused variables
    unset RED GREEN sequelace logs down xdebug ssh start deletecache restart status \
        update install require requireparam prune upgrade poweroff version lint \
        launch launchparam remove removeparam mail NO_COLOR args

    exit 0
}

# Start script
main "$@"
