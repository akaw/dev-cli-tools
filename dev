#!/usr/bin/env bash

# This script provides shortcuts for common ddev, shopware and other tools commands.
#
# License: MIT
# Author: Andre Witte
# Title: dDEV shortening toolbox
# Description: dDEV shortening toolbox
# Version: beta #NoRiskNoFun
# https://github.com/akaw/dev-cli-tools/
# Usage: dev [OPTIONS] [PARAMETERS]

# It provides shortcuts for common ddev, shopware and other tools commands. It is
# designed to be a simple and easy-to-use tool for developers working with ddev.
#
# The script is designed to be run from the root of a ddev project. It provides
# shortcuts for common ddev, shopware and other tools commands.
#
# Requirements:
# - ddev
# - shopware
# - composer
# - npm
# - node
# - xdebug
# - sequelace
#
# Options:
#   -h, --help          Print this help and exit
#   --no-color          Disable colored output
#   -v, --version       Print the version and exit
#   -vvv, --verbose     Print script debug info
#   upgrade             Upgrade the script to the latest version
#   b [component]       Build project components: storefront|admin|js|all
#   c [command]         Run composer with optional parameter (default: install)
#   cup                 Composer Update project dependencies
#   cin                 Composer Install project dependencies
#   cre [command]       Composer Require composer package
#   cda                 Composer Dump Autoload
#   crm [package]       Composer Remove composer package
#   crs [package]       Composer require source
#   cc                  Clear cache
#   dc                  Delete cache
#   plre                Refresh plugins
#   pl                  List plugins
#   plac                Activate plugin
#   plin                Install plugin
#   plun                Uninstall plugin
#   plde                Deactivate plugin
#   dami                Database Migrate
#   init                Initialize the project
#   n [project_type]    Create a new project: symfony|shopware
#   e [sql_file]        Export database (default: .project/db.sql.gz)
#   i [sql_file]        Import database (default: .project/db.sql.gz)
#   seq                 Start Sequel Ace and connect to the database
#   l                   Print continuous logs
#   u                   Launch the project
#   d                   Stop the project
#   o                   Open the project in a browser
#   x [on|off]          Start or stop xdebug: on|off
#   m                   Launch mail service
#   t [options]         Run tests with optional parameter
#   r                   Restart the project
#   st                  Check the status of the project
#   bk                  Create a backup of the project
#   rs [backup_file]    Restore the project from a backup
#   p                   Prune unused Docker resources
#   lint                Run linting tools

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
# ScriptDir: "$script_dir"

# Display usage information
usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTIONS] [PARAMETERS]
Shortcuts for ddev,symfony,shopware and other tools

Options:
    -h, --help        Print this help and exit
    --no-color        Disable colored output
    -v, --version     Print the version and exit
    -vvv, --verbose   Print script debug info
    upgrade           Upgrade the script to the latest version
    b [component]     Build project components: storefront|admin|js|all
    c [command]       Run composer with optional parameter (default: install)
    cup               Composer Update project dependencies
    cin               Composer Install project dependencies
    cre [command]     Composer Require composer package
    cda               Composer Dump Autoload
    crm [package]     Composer Remove composer package
    crs [package]     Composer require source
    cc                Clear cache
    dc                Delete cache
    plre              Refresh plugins
    pl                List plugins
    plac              Activate plugin
    plin              Install plugin
    plun              Uninstall plugin
    plde              Deactivate plugin
    dami              Database Migrate
    init              Initialize the project
    n [project_type]  Create a new project: symfony|shopware
    e [sql_file]      Export database (default: .project/db.sql.gz)
    i [sql_file]      Import database from .project/db.sql.gz
    seq               Start Sequel Ace and connect to the database
    l                 Print continuous logs
    u                 Launch the project
    d                 Stop the project
    o                 Open the project in a browser
    x [on|off]        Start or stop xdebug: on|off
    m                 Launch mail service
    t [options]       Run tests with optional parameter
    r                 Restart the project
    st                Check the status of the project
    bk                Create a backup of the project
    rs [backup_file]  Restore the project from a backup
    p                 Prune unused Docker resources
    lint              Run linting tools
EOF
    exit 0
}

help() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTIONS] [PARAMETERS]
Shortcuts for ddev,symfony,shopware and other tools
EOF
    exit 0
}

# Display the current version of the script
version() {
    echo "dev-cli-tools version beta #NoRiskNoFun"
}

# Cleanup function to handle script termination
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

# Setup colors for terminal output
setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

# Print a message to stderr
msg() {
    echo >&2 -e "${1-}"
}

# Print a message to stderr and exit with a given code
die() {
    local msg=$1
    local code=${2-1}
    msg "$msg"
    exit "$code"
}

# Default function to start the development environment
# This function is called when no arguments are provided
# u = up, s = sequelace, l = logs, o = open
default() {
    dev u s o info
}

# Function to upgrade the script
upgrade() {
    local url="https://raw.githubusercontent.com/akaw/dev-cli-tools/refs/heads/main/dev"
    local script_path="${BASH_SOURCE[0]}"
    echo "Downloading the latest version of the script..."
    curl -o "$script_path" "$url"
    chmod +x "$script_path"
    echo "Upgrade complete."
    exit 0
}

# Function to check if a file exists
check_file_exists() {
    local file_path="$1"
    if [[ ! -f "$file_path" ]]; then
        die "File not found: $file_path"
    fi
}

# Parse command-line parameters
parse_params() {
    # default values of variables set from params
    exportdb=0
    exportdbparam=""
    importdb=0
    importdbparam=""
    sequelace=0
    logs=0
    launch=0
    down=0
    mail=0
    xdebug=0
    new=0
    newparam=""
    start=0
    init=0
    xdebugparam=""
    ssh=0
    console=0
    consoleparam=""
    build=0
    buildparam=""
    start=0
    deletecache=0
    test=0
    testparam=""
    restart=0
    status=0
    backup=0
    restore=0
    restoreparam=""
    update=0
    install=0
    composer=0
    require=0
    requireparam=""
    remove=0
    removeparam=""
    prune=0
    upgrade=0
    poweroff=0
    packages=0
    packagesparam=""
    prefersource=0
    prefersourceparam=""
    version=0
    lint=0

    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -vvv | --verbose) set -x ;;
        -v | --version)
            version
            shift
            ;;
        s | ssh)
            ssh=1
            shift
            ;;
        b | build)
            build=1
            buildparam="${2-}"
            [[ -z "${buildparam}" ]] && buildparam="all"
            shift 2
            ;;
        e | export)
            exportdb=1
            exportdbparam="${2-}"
            [[ -z "${exportdbparam}" ]] && exportdbparam=".project/db.sql.gz"
            shift
            ;;
        i | import)
            importdb=1
            importdbparam="${2-}"
            [[ -z "${importdbparam}" ]] && importdbparam=".project/db.sql.gz"
            shift 2
            ;;
        se | seq | sequelace)
            sequelace=1
            shift
            ;;
        o | launch)
            launch=1
            shift
            ;;
        u | up | start)
            start=1
            shift
            ;;
        d | down | stop)
            down=1
            shift
            ;;
        n | new)
            new=1
            newparam="${2-}"
            shift 2
            ;;
        l | logs)
            logs=1
            shift
            ;;
        x | xdebug)
            xdebug=1
            xdebugparam="${2-}"
            shift 2
            ;;
        t | test)
            test=1
            testparam="${2-}"
            shift 2
            ;;
        p | prune)
            prune=1
            shift
            ;;
        poweroff)
            poweroff=1
            shift
            ;;
        r | restart)
            restart=1
            shift
            ;;
        st | sta | stat | status | info)
            status=1
            shift
            ;;
        bk | backup)
            backup=1
            shift
            ;;
        rs | restore)
            restore=1
            restoreparam="${2-}"
            shift 2
            ;;
        cpa | packages)
            packages=1
            packagesparam="true"
            shift
            ;;
        cli | com:list | composer:list)
            packages=1
            shift
            ;;
        com | composer)
            composer=1
            composerparam="${2-}"
            shift 2
            ;;
        cup | update)
            composer=1
            composerparam="update"
            shift
            ;;
        cin | install)
            composer=1
            composerparam="install"
            shift
            ;;
        cre | require)
            composer=1
            composerparam="require ${2-}"
            shift 2
            ;;
        src | source | prefer-source)
            prefersource=1
            prefersourceparam="${2-}"
            shift 2
            ;;
        crm | remove)
            remove=1
            removeparam="${2-}"
            shift 2
            ;;
        cda | dump-autoload)
            composer=1
            composerparam="dump-autoload"
            shift
            ;;
        dc)
            deletecache=1
            shift
            ;;
        cc | cacl | ca:cl | clear:cache)
            console=1
            consoleparam="cache:clear"
            shift
            ;;
        plre | pl:re | plugin:refresh)
            console=1
            consoleparam="plugin:refresh"
            shift
            ;;
        pl | pli | plli | pl:li | plugin:list)
            console=1
            consoleparam="plugin:list"
            shift
            ;;
        plac | pl:ac | plugin:activate)
            console=1
            consoleparam="plugin:activate ${2-}"
            shift 2
            ;;
        plin | pl:in | plugin:install)
            console=1
            consoleparam="plugin:install ${2-}"
            shift 2
            ;;
        plun | pl:un | plugin:uninstall)
            console=1
            consoleparam="plugin:uninstall ${2-}"
            shift 2
            ;;
        plde | pl:de | plugin:deactivate)
            console=1
            consoleparam="plugin:deactivate ${2-}"
            shift 2
            ;;
        dami | da:mi | database:migrate)
            console=1
            consoleparam="database:migrate ${2-} --all"
            shift 2
            ;;
        c | con | console)
            console=1
            consoleparam="${2-}"
            shift 2
            ;;
        init)
            init=1
            shift
            ;;
        m | mail)
            mail=1
            shift
            ;;
        upgrade)
            upgrade=1
            shift
            ;;
        lint)
            lint=1
            shift
            ;;
        --no-color)
            NO_COLOR=1
            shift
            ;;
        ?*)
            usage
            die "Unknown option: $1"
            ;;
        *) break ;;
        esac
    done

    args=("$@")

    return 0
}

# Check if ddev is installed
if ! command -v ddev &>/dev/null; then
    die "ddev is not installed. Please install ddev first."
fi

# Prompt user to start DEV environment if no arguments are provided
if [ $# -eq 0 ]; then
    read -p "Start DEV Environment (y/n)?" choice
    case "$choice" in
    y | Y) default ;;
    *) usage ;;
    esac
    exit 1
fi
parse_params "$@"
setup_colors

# Start the project
if [[ $start == 1 ]]; then
    echo "Starting project..."
    ddev start
    ddev describe

fi

# Stop the project
if [[ $down == 1 ]]; then
    echo "Stopping project..."
    ddev stop
fi

if [[ $poweroff == 1 ]]; then
    echo "power off ddev..."
    ddev poweroff
fi

# Connect to the project via SSH
if [[ $ssh == 1 ]]; then
    echo "Connecting to project via SSH..."
    ddev ssh
fi

# Run composer commands
if [[ $composer == 1 ]]; then
    echo "Updating project dependencies..."
    ddev composer $composerparam
    echo "Project dependencies updated"
fi

# Run composer prefer-source
if [[ $prefersource == 1 ]]; then
    [[ -z "${prefersourceparam-}" ]] && die "Please provide a composer package name"
    echo "Running composer prefer-source for package: $prefersourceparam"
    ddev composer remove $prefersourceparam
    ddev composer require $prefersourceparam --prefer-source
fi

# Execute console commands
if [[ $console == 1 ]]; then
    echo "Executing console command: $consoleparam"
    ddev exec console $consoleparam
fi

# Build shopware components
if [[ $build == 1 ]]; then
    [[ -z "${buildparam-}" ]] && buildparam="all"
    echo "Building project components: $buildparam"
    if [[ $buildparam == "storefront" ]]; then
        ddev exec bin/build-storefront.sh
    fi
    if [[ $buildparam == "admin" ]]; then
        ddev exec bin/build-administration.sh
    fi
    if [[ $buildparam == "js" ]]; then
        ddev exec bin/build-js.sh
    fi
    if [[ $buildparam == "all" ]]; then
        ddev exec bin/build-administration.sh
        ddev exec bin/build-storefront.sh
        ddev exec bin/build-js.sh
    fi
fi

# Export the database
if [[ $exportdb == 1 ]]; then
    echo "Exporting database..."
    ddev export-db -f $exportdbparam
fi

# Import the database
if [[ $importdb == 1 ]]; then
    echo "Importing database $importdbparam... "
    check_file_exists "$importdbparam"
    ddev import-db -f $importdbparam
fi

# Start Sequel Ace
if [[ $sequelace == 1 ]]; then
    echo "Starting Sequel Ace..."
    ddev sequelace
fi

# Toggle xdebug
if [[ $xdebug == 1 ]]; then
    echo "Toggling xdebug: $xdebugparam"
    [[ -z "${xdebugparam-}" ]] && xdebugparam="on"
    ddev xdebug $xdebugparam
fi

# Launch mail service
if [[ $mail == 1 ]]; then
    echo "Launching mail service..."
    ddev launch -m
fi

# Launch the project
if [[ $launch == 1 ]]; then
    echo "Launching project..."
    ddev launch
fi

# Print continuous logs
if [[ $logs == 1 ]]; then
    echo "Printing continuous logs..."
    ddev logs -f
fi

# Delete cache
if [[ $deletecache == 1 ]]; then
    echo "Deleting cache..."
    ddev exec rm -rf var/cache/dev*
    ddev exec rm -rf var/cache/prod*
fi

# Initialize the project
if [[ $init == 1 ]]; then
    read -p "Initialize DEV Environment it will overwrite db and .env.local (y/n)?" choice
    case "$choice" in
    y | Y)
        echo "Initializing project..."
        check_file_exists ".project/init.sql.gz"
        check_file_exists ".project/env.ddev"
        ddev exec cp .env.ddev .env.local
        ddev start
        ddev import-db -f .project/init.sql.gz
        ddev describe
        ;;
    *) usage ;;
    esac
fi

# Run tests
if [[ $test == 1 ]]; then
    echo "Running tests: $testparam"
    [[ -z "${testparam-}" ]] && testparam=""
    ddev exec php bin/phpunit $testparam
fi

# Restart the project
if [[ $restart == 1 ]]; then
    echo "Restarting project..."
    ddev restart
fi

# Check project status
if [[ $status == 1 ]]; then
    echo "Checking project status..."
    ddev describe
fi

# Create a backup
if [[ $backup == 1 ]]; then
    echo "Creating backup..."
    ddev exec tar -czf backup.tar.gz .
    echo "Backup created: backup.tar.gz"
fi

# Restore the project from a backup
if [[ $restore == 1 ]]; then
    echo "Restoring project from backup: $restoreparam"
    [[ -z "${restoreparam-}" ]] && restoreparam="backup.tar.gz"
    ddev exec tar -xzf $restoreparam
    echo "Project restored from: $restoreparam"
fi

# Prune unused Docker resources
if [[ $prune == 1 ]]; then
    echo "Pruning unused Docker resources..."
    ddev exec docker system prune -f
    echo "Unused Docker resources pruned"
fi

# Run linting tools
if [[ $lint == 1 ]]; then
    echo "Running linting tools..."
    ddev exec npm run lint
fi

if [[ $packages == 1 ]]; then
    local base_dir="./"
    local vendor_dir="$base_dir/vendor"
    local plugins_dir="$base_dir/custom/plugins"

    find "$vendor_dir/store.shopware.com" -name "composer.json" -type f -maxdepth 2 | while read -r store_composer_file; do
        local path=$(dirname "$store_composer_file" | sed "s|$vendor_dir/||")
        local link_name=$(create_package_name "$path")
        local link_path="$plugins_dir/$link_name"

        if [ "$packagesparam" = true ]; then
            # Entfernen Sie vorhandene Links oder Verzeichnisse
            [ -L "$link_path" ] && unlink "$link_path"
            [ -d "$link_path" ] && rmdir "$link_path"

            # Erstellen Sie den Symlink
            ln -s "../../vendor/$path" "$link_path"
        else
            echo "$link_name"
        fi
    done
fi

create_package_name() {
    local path="$1"
    local vendor=$(echo "$path" | cut -d'/' -f1)
    local name=$(echo "$path" | cut -d'/' -f2)
    vendor=$(echo "${vendor^}")
    name=$(echo "$name" | sed -e 's/-/ /g' -e 's/\b\(.\)/\u\1/g' -e 's/ //g')
    echo "$vendor$name"
}

# Upgrade the script
if [[ $upgrade == 1 ]]; then
    upgrade
fi

# Create a new project
if [[ $new == 1 ]]; then
    echo "Creating new project: $newparam"
    [[ -z "${newparam-}" ]] && newparam="symfony"
    if [[ $newparam == "symfony" ]]; then
        echo "Configuring ddev symfony project..."
        ddev config --docroot=public
        ddev composer create symfony/skeleton
        ddev composer require webapp
        ddev launch
    elif [[ $newparam == "shopware" ]]; then
        echo "Configuring ddev shopware project..."
        ddev config --project-type=shopware6 --disable-settings-management --docroot=shopware/public --create-docroot --web-working-dir=/var/www/html/shopware \
            --database=mysql:8.0 --php-version=8.2 --nodejs-version=20 --webserver-type=apache-fpm \
            --web-environment-add="DATABASE_URL=mysql://db:db@db:3306/db,MAILER_DSN=smtp://localhost:1025?encryption=&auth_mode=,APP_URL=\${DDEV_PRIMARY_URL},APP_DEBUG=1,APP_ENV=dev"

        ddev start

        echo "Creating shopware project..."
        ddev exec "cd /var/www/html && rm -rf shopware/ && composer create-project shopware/production shopware -n"

        echo "Installing Shopware..."
        ddev exec bin/console system:install --basic-setup --shop-locale=de-DE
    else
        die "Unknown project type: $newparam"
    fi
    mkdir .project
fi

exit 0
