#!/usr/bin/env bash

# This script provides shortcuts for common ddev, shopware and other tools commands.
#
# Author: Andre Witte
#
# Description: dDEV shortening tools
# Usage: dev [OPTIONS] [PARAMETERS]
# Version: 1.0.0
# https://github.com/akaw/dev-cli-tools/
#
# Examples:
#   dev u s l
#   dev composer install
#   dev composer require symfony/webpack-encore-bundle
#   dev composer remove symfony/webpack-encore-bundle
#   dev composer dump-autoload
#   dev composer update
#   dev new symfony
#   dev new shopware
#   dev export
#   dev import
#   dev sequelace
#   dev logs
#   dev up
#   dev down
#   dev open
#   dev xdebug on
#   dev xdebug off
#   dev mail
#   ...

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

# script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
# ScriptDir: "$script_dir"

# Display usage information
usage() {
    cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTIONS] [PARAMETERS]
Shortcuts for ddev,symfony,shopware and other tools

Available options:

  -h, --help       Print this help and exit
  --no-color       Disable colored output

Commands and their parameters:

  upgrade                      Upgrade the script to the latest version
  b, build [component]         Build project components: storefront|admin|js|all
  c, composer [command]        Run composer with optional parameter (default: install)
  cup, update                  Composer Update project dependencies
  cin, install                 Composer Install project dependencies
  cre, require [command]       Composer Require composer package
  cda, dump-autoload           Composer Dump Autoload
  crm, remove [package]        Composer Remove composer package
  crs, source [package]        Composer require source
  n, new [project_type]        Create a new project: symfony|shopware
  e, export [sql_file]         Export database (default: .project/db.sql.gz)
  i, import [sql_file]         Import database from .project/db.sql.gz
  s, sequelace                 Start Sequel Ace and connect to the database
  l, logs                      Print continuous logs
  u, up                        Launch the project
  d, down                      Stop the project
  o, open                      Open the project in a browser
  x, xdebug [on|off]           Start or stop xdebug: on|off
  m, mail                      Launch mail service
  t, test [options]            Run tests with optional parameter
  r, restart                   Restart the project
  st, status, info             Check the status of the project
  bk, backup                   Create a backup of the project
  rs, restore [backup_file]    Restore the project from a backup
  p, prune                     Prune unused Docker resources

Shopware Console shortcuts:
  ca:cl                        Clear cache
  cacl                         Clear cache
  cc                           Clear cache
  dami                         Database Migrate
  da:mi                        Database Migrate
  plre                         Refresh plugins
  pl:re                        Refresh plugins
  pl                           List plugins
  pli                          List plugins
  plli                         List plugins
  plac, pl:ac [plugin]         Activate plugin
  plin, pl:in [plugin]         Install plugin
  plun, pl:un [plugin]         Uninstall plugin
  plde, pl:de [plugin]         Deactivate plugin
  console, con [command]       Execute console command

EOF
    exit 0
}

# Cleanup function to handle script termination
cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

# Setup colors for terminal output
setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

# Print a message to stderr
msg() {
    echo >&2 -e "${1-}"
}

# Print a message to stderr and exit with a given code
die() {
    local msg=$1
    local code=${2-1}
    msg "$msg"
    exit "$code"
}

# Default function to start the development environment
# This function is called when no arguments are provided
# u = up, s = sequelace, l = logs, o = open
default() {
    dev u s o info
}

# Function to upgrade the script
upgrade() {
    local url="https://raw.githubusercontent.com/akaw/dev-cli-tools/refs/heads/main/dev"
    local script_path="${BASH_SOURCE[0]}"
    echo "Downloading the latest version of the script..."
    curl -o "$script_path" "$url"
    chmod +x "$script_path"
    echo "Upgrade complete."
    exit 0
}

# Function to check if a file exists
check_file_exists() {
    local file_path="$1"
    if [[ ! -f "$file_path" ]]; then
        die "File not found: $file_path"
    fi
}

# Parse command-line parameters
parse_params() {
    # default values of variables set from params
    exportdb=0
    importdb=0
    importdbparam=""
    exportdbparam=""
    sequelace=0
    logs=0
    launch=0
    down=0
    mail=0
    xdebug=0
    new=0
    newparam=""
    start=0
    init=0
    xdebugparam=""
    ssh=0
    console=0
    consoleparam=""
    build=0
    buildparam=""
    start=0
    deletecache=0
    test=0
    testparam=""
    restart=0
    status=0
    backup=0
    restore=0
    restoreparam=""
    update=0
    install=0
    composer=0
    require=0
    requireparam=""
    remove=0
    removeparam=""
    prune=0
    upgrade=0
    poweroff=0
    packages=0
    packagesparam=""

    while :; do
        case "${1-}" in
        -h | --help) usage ;;
        -v | --verbose) set -x ;;
        s | ssh) ssh=1 ;;
        b | build)
            build=1
            buildparam="${2-}"
            shift
            ;;
        e | export)
            exportdb=1
            exportdbparam="${2-}"
            [[ -z "${2-}" ]] && exportdbparam=".project/db.sql.gz"
            ;;
        i | import)
            importdb=1
            importdbparam="${2-}"
            [[ -z "${2-}" ]] && importdbparam=".project/db.sql.gz"
            ;;
        se | seq | sequelace) sequelace=1 ;;
        o | launch) launch=1 ;;
        u | up | start) start=1 ;;
        d | down | stop) down=1 ;;
        n | new)
            new=1
            newparam="${2}"
            shift
            ;;
        l | logs) logs=1 ;;
        x | xdebug)
            xdebug=1
            xdebugparam="${2-}"
            shift
            ;;
        t | test)
            test=1
            testparam="${2-}"
            shift
            ;;
        prune) prune=1 ;;
        poweroff) poweroff=1 ;;
        r | restart) restart=1 ;;
        st | sta | stat | status | info) status=1 ;;
        bk | backup) backup=1 ;;
        rs | restore)
            restore=1
            restoreparam="${2-}"
            shift
            ;;
        cpa | packages)
            packages=1
            packagesparam="false"
            shift
            ;;
        cli | com:list | composer:list)
            packages=1
            shift
            ;;
        com | composer)
            composer=1
            composerparam="${2-}"
            shift
            ;;
        cup | update)
            composer=1
            composerparam="update"
            ;;
        cin | install)
            composer=1
            composerparam="install"
            ;;
        cre | require)
            composer=1
            composerparam="require ${2-}"
            shift
            ;;
        cps | prefer-source)
            composer=1
            composerparam="require ${2-} --prefer-source"
            shift
            ;;
        crm | remove)
            remove=1
            removeparam="${2-}"
            shift
            ;;
        cda | dump-autoload)
            composer=1
            composerparam="dump-autoload"
            ;;
        dc) deletecache=1 ;;
        cc | cacl | ca:cl | clear:cache)
            console=1
            consoleparam="cache:clear"
            ;;
        plre | pl:re | plugin:refresh)
            console=1
            consoleparam="plugin:refresh"
            ;;
        pl | pli | plli | pl:li | plugin:list)
            console=1
            consoleparam="plugin:list"
            ;;
        plac | pl:ac | plugin:activate)
            console=1
            consoleparam="plugin:activate ${2-}"
            shift
            ;;
        plin | pl:in | plugin:install)
            console=1
            consoleparam="plugin:install ${2-}"
            shift
            ;;
        plun | pl:un | plugin:uninstall)
            console=1
            consoleparam="plugin:uninstall ${2-}"
            shift
            ;;
        plde | pl:de | plugin:deactivate)
            console=1
            consoleparam="plugin:deactivate ${2-}"
            shift
            ;;
        dami | da:mi | database:migrate)
            console=1
            consoleparam="database:migrate ${2-} --all"
            shift
            ;;
        c | con | console)
            console=1
            consoleparam="${2-}"
            shift
            ;;

        init) init=1 ;;
        m | mail) mail=1 ;;
        upgrade) upgrade=1 ;;
        --no-color) NO_COLOR=1 ;;
        ?*)
            usage
            die "Unknown option: $1"
            ;;
        *) break ;;
        esac
        shift
    done

    args=("$@")

    return 0
}

# Check if ddev is installed
if ! command -v ddev &>/dev/null; then
    die "ddev is not installed. Please install ddev first."
fi

# Prompt user to start DEV environment if no arguments are provided
if [ $# -eq 0 ]; then
    read -p "Start DEV Environment (y/n)?" choice
    case "$choice" in
    y | Y) default ;;
    *) usage ;;
    esac
    exit 1
fi
parse_params "$@"
setup_colors

# Start the project
if [[ $start == 1 ]]; then
    echo "Starting project..."
    ddev start
    ddev describe

fi

# Stop the project
if [[ $down == 1 ]]; then
    echo "Stopping project..."
    ddev stop
fi

if [[ $poweroff == 1 ]]; then
    echo "power off ddev..."
    ddev poweroff
fi

# Connect to the project via SSH
if [[ $ssh == 1 ]]; then
    echo "Connecting to project via SSH..."
    ddev ssh
fi

# Run composer commands
if [[ $composer == 1 ]]; then
    [[ -z "${composerparam-}" ]] && composerparam=""
    echo "Updating project dependencies..."
    ddev composer $composerparam
    echo "Project dependencies updated"
fi

# Execute console commands
if [[ $console == 1 ]]; then
    echo "Executing console command: $consoleparam"
    ddev exec php bin/console $consoleparam
fi

# Build shopware components
if [[ $build == 1 ]]; then
    [[ -z "${buildparam-}" ]] && buildparam="all"
    echo "Building project components: $buildparam"
    if [[ $buildparam == "storefront" ]]; then
        ddev exec bin/build-storefront.sh
    fi
    if [[ $buildparam == "admin" ]]; then
        ddev exec bin/build-administration.sh
    fi
    if [[ $buildparam == "js" ]]; then
        ddev exec bin/build-js.sh
    fi
    if [[ $buildparam == "all" ]]; then
        ddev exec bin/build-administration.sh
        ddev exec bin/build-storefront.sh
        ddev exec bin/build-js.sh
    fi
fi

# Export the database
if [[ $exportdb == 1 ]]; then
    echo "Exporting database..."
    check_file_exists "$exportdbparam"
    ddev export-db -f $exportdbparam
fi

# Import the database
if [[ $importdb == 1 ]]; then
    echo "Importing database $importdbparam... "
    check_file_exists "$importdbparam"
    ddev import-db -f $importdbparam
fi

# Start Sequel Ace
if [[ $sequelace == 1 ]]; then
    echo "Starting Sequel Ace..."
    ddev sequelace
fi

# Toggle xdebug
if [[ $xdebug == 1 ]]; then
    echo "Toggling xdebug: $xdebugparam"
    [[ -z "${xdebugparam-}" ]] && xdebugparam="on"
    ddev xdebug $xdebugparam
fi

# Launch mail service
if [[ $mail == 1 ]]; then
    echo "Launching mail service..."
    ddev launch -m
fi

# Launch the project
if [[ $launch == 1 ]]; then
    echo "Launching project..."
    ddev launch
fi

# Print continuous logs
if [[ $logs == 1 ]]; then
    echo "Printing continuous logs..."
    ddev logs -f
fi

# Delete cache
if [[ $deletecache == 1 ]]; then
    echo "Deleting cache..."
    ddev exec rm -rf var/cache/dev*
    ddev exec rm -rf var/cache/prod*
fi

# Initialize the project
if [[ $init == 1 ]]; then
    read -p "Initialize DEV Environment it will overwrite db and .env.local (y/n)?" choice
    case "$choice" in
    y | Y)
        echo "Initializing project..."
        check_file_exists ".project/init.sql.gz"
        check_file_exists ".project/env.ddev"
        ddev exec cp .env.ddev .env.local
        ddev start
        ddev import-db -f .project/init.sql.gz
        ddev describe
        ;;
    *) usage ;;
    esac
fi

# Run tests
if [[ $test == 1 ]]; then
    echo "Running tests: $testparam"
    [[ -z "${testparam-}" ]] && testparam=""
    ddev exec php bin/phpunit $testparam
fi

# Restart the project
if [[ $restart == 1 ]]; then
    echo "Restarting project..."
    ddev restart
fi

# Check project status
if [[ $status == 1 ]]; then
    echo "Checking project status..."
    ddev describe
fi

# Create a backup
if [[ $backup == 1 ]]; then
    echo "Creating backup..."
    ddev exec tar -czf backup.tar.gz .
    echo "Backup created: backup.tar.gz"
fi

# Restore the project from a backup
if [[ $restore == 1 ]]; then
    echo "Restoring project from backup: $restoreparam"
    [[ -z "${restoreparam-}" ]] && restoreparam="backup.tar.gz"
    ddev exec tar -xzf $restoreparam
    echo "Project restored from: $restoreparam"
fi

# Prune unused Docker resources
if [[ $prune == 1 ]]; then
    echo "Pruning unused Docker resources..."
    ddev exec docker system prune -f
    echo "Unused Docker resources pruned"
fi

if [[ $packages == 1 ]]; then
    local base_dir="./"
    local vendor_dir="$base_dir/vendor"
    local plugins_dir="$base_dir/custom/plugins"

    find "$vendor_dir/store.shopware.com" -name "composer.json" -type f -maxdepth 2 | while read -r store_composer_file; do
        local path=$(dirname "$store_composer_file" | sed "s|$vendor_dir/||")
        local link_name=$(create_package_name "$path")
        local link_path="$plugins_dir/$link_name"

        if [ "$packagesparam" = true ]; then
            # Entfernen Sie vorhandene Links oder Verzeichnisse
            [ -L "$link_path" ] && unlink "$link_path"
            [ -d "$link_path" ] && rmdir "$link_path"

            # Erstellen Sie das Symlink
            ln -s "../../vendor/$path" "$link_path"
        else
            echo "$link_name"
        fi
    done
fi

create_package_name() {
    local path="$1"
    local vendor=$(echo "$path" | cut -d'/' -f1)
    local name=$(echo "$path" | cut -d'/' -f2)
    vendor=$(echo "${vendor^}")
    name=$(echo "$name" | sed -e 's/-/ /g' -e 's/\b\(.\)/\u\1/g' -e 's/ //g')
    echo "$vendor$name"
}

# Upgrade the script
if [[ $upgrade == 1 ]]; then
    upgrade
fi

# Create a new project
if [[ $new == 1 ]]; then
    echo "Creating new project: $newparam"
    [[ -z "${newparam-}" ]] && newparam="symfony"
    if [[ $newparam == "symfony" ]]; then
        echo "Configuring ddev symfony project..."
        ddev config --docroot=public
        ddev composer create symfony/skeleton
        ddev composer require webapp
        ddev launch
    elif [[ $newparam == "shopware" ]]; then
        echo "Configuring ddev shopware project..."
        ddev config --project-type=shopware6 --disable-settings-management --docroot=shopware/public --create-docroot --web-working-dir=/var/www/html/shopware \
            --database=mysql:8.0 --php-version=8.2 --nodejs-version=20 --webserver-type=apache-fpm \
            --web-environment-add="DATABASE_URL=mysql://db:db@db:3306/db,MAILER_DSN=smtp://localhost:1025?encryption=&auth_mode=,APP_URL=\${DDEV_PRIMARY_URL},APP_DEBUG=1,APP_ENV=dev"

        ddev start

        echo "Creating shopware project..."
        ddev exec "cd /var/www/html && rm -rf shopware/ && composer create-project shopware/production shopware -n"

        echo "Installing Shopware..."
        ddev exec bin/console system:install --basic-setup --shop-locale=de-DE
    else
        die "Unknown project type: $newparam"
    fi
    mkdir .project
fi

exit 0
